<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Virus on Cao&#39;s blog</title>
        <link>https://jb-cao.github.io/Cao-blog/tags/virus/</link>
        <description>Recent content in Virus on Cao&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Wed, 05 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://jb-cao.github.io/Cao-blog/tags/virus/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>宏基因组中病毒序列的宿主预测</title>
        <link>https://jb-cao.github.io/Cao-blog/p/virus-host/</link>
        <pubDate>Wed, 05 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://jb-cao.github.io/Cao-blog/p/virus-host/</guid>
        <description>&lt;img src="https://jb-cao.github.io/Cao-blog/p/virus-host/images/IPEV.png" alt="Featured image of post 宏基因组中病毒序列的宿主预测" /&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;在宏基因组学的研究领域中，对病毒序列宿主的预测已经成为一项极具挑战性但又至关重要的任务。病毒是一种非细胞生命形态的微生物，它们必须依赖宿主细胞才能进行繁殖和生存。然而，在复杂的生态环境中，病毒所感染的宿主往往是未知的。病毒宿主预测就是通过各种技术手段和方法，利用病毒基因组中的信息来推测其可能感染的宿主（如细菌等微生物）的过程。&lt;/p&gt;
&lt;p&gt;目前已有的宿主预测方法已经有很多了，比如2022年前就有以下工具：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;名称&lt;/th&gt;
          &lt;th&gt;模型&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
          &lt;th&gt;预测水平&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;WIsH&lt;/td&gt;
          &lt;td&gt;马尔可夫模型&lt;/td&gt;
          &lt;td&gt;针对潜在宿主基因组训练了一个同质的马尔可夫模型，并计算原核生物基因组作为查询病毒宿主的可能性。&lt;/td&gt;
          &lt;td&gt;属&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;PHP&lt;/td&gt;
          &lt;td&gt;高斯混合模型&lt;/td&gt;
          &lt;td&gt;利用 - mers频率（可反映病毒和宿主共享的密码子使用模式）来训练高斯混合模型。&lt;/td&gt;
          &lt;td&gt;属&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;HoPhage&lt;/td&gt;
          &lt;td&gt;深度学习模型和马尔可夫链算法&lt;/td&gt;
          &lt;td&gt;使用每个候选宿主基因组的编码序列（CDS）构建马尔可夫链模型，然后计算查询噬菌体片段感染候选宿主基因组的可能性。还使用深度学习模型，并最终将深度学习模型的结果与马尔可夫模型的结果整合用于宿主预测。&lt;/td&gt;
          &lt;td&gt;属&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;VPF-Class&lt;/td&gt;
          &lt;td&gt;基于序列匹配的模型&lt;/td&gt;
          &lt;td&gt;利用从IMG/VR系统下载的病毒蛋白家族（VPFs）来估计查询病毒与已知宿主病毒之间的相似性。&lt;/td&gt;
          &lt;td&gt;属&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;RaFAH&lt;/td&gt;
          &lt;td&gt;随机森林模型&lt;/td&gt;
          &lt;td&gt;使用MMseqs2生成蛋白质簇并构建轮廓隐马尔可夫模型（HMMs）。然后，使用HMM比对输出的特征训练多类别随机森林模型。&lt;/td&gt;
          &lt;td&gt;属&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;HostG&lt;/td&gt;
          &lt;td&gt;图卷积网络（GCN）&lt;/td&gt;
          &lt;td&gt;利用病毒和原核生物之间共享的蛋白质簇创建知识图谱，并训练GCN进行预测。&lt;/td&gt;
          &lt;td&gt;属&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;PHIST&lt;/td&gt;
          &lt;td&gt;基于比对的模型&lt;/td&gt;
          &lt;td&gt;基于病毒和宿主基因组之间的精确匹配来预测病毒的宿主原核生物。&lt;/td&gt;
          &lt;td&gt;种&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;PredPHI&lt;/td&gt;
          &lt;td&gt;卷积神经网络（CNN）&lt;/td&gt;
          &lt;td&gt;利用蛋白质序列中的化学成分信息（如氨基酸丰度）训练CNN进行宿主预测。&lt;/td&gt;
          &lt;td&gt;种&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;PHIAF&lt;/td&gt;
          &lt;td&gt;生成对抗网络（GAN）和卷积神经网络（CNN）&lt;/td&gt;
          &lt;td&gt;使用来自DNA和蛋白质序列的特征（如 - mers频率和分子量）训练CNN进行宿主预测，并应用GAN从已知的病毒 - 宿主相互作用生成伪病毒 - 宿主对以扩充数据集。&lt;/td&gt;
          &lt;td&gt;种&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;vHULK&lt;/td&gt;
          &lt;td&gt;多层感知机模型（MLP）&lt;/td&gt;
          &lt;td&gt;将宿主预测表述为一个多类别分类问题，输入为病毒，标签为原核生物，模型使用的特征是针对噬菌体蛋白家族pVOGs数据库的蛋白质轮廓比对结果。&lt;/td&gt;
          &lt;td&gt;种&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;DeepHost&lt;/td&gt;
          &lt;td&gt;卷积神经网络（CNN）&lt;/td&gt;
          &lt;td&gt;设计了一种基因组编码方法，使用 - mers特征将各种长度的基因组编码成3D矩阵，并训练CNN模型进行宿主预测。&lt;/td&gt;
          &lt;td&gt;种&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;VHM-net&lt;/td&gt;
          &lt;td&gt;马尔可夫随机场&lt;/td&gt;
          &lt;td&gt;利用马尔可夫随机场框架，通过结合病毒和原核生物之间的多种特征（如CRISPRs、WIsH的输出得分、BLASTN比对等）来预测病毒是否感染目标原核生物。&lt;/td&gt;
          &lt;td&gt;种&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;CHERRY&lt;/td&gt;
          &lt;td&gt;图卷积编码器和解码器用于链接预测&lt;/td&gt;
          &lt;td&gt;将宿主预测问题表述为多模态图中的链接预测问题，并设计了用于宿主预测的编码器 - 解码器结构。多模态图将不同类型的特征（包括蛋白质组织、CRISPR、序列相似性和 - mers频率）集成到节点和边中，边连接来自标记（训练）和未标记（测试）数据的病毒和原核生物。&lt;/td&gt;
          &lt;td&gt;种&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;主要原理&#34;&gt;主要原理&lt;/h3&gt;
&lt;p&gt;（一）基于比对的方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;基于病毒间相似性或病毒与原核生物基因组相似性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;这类方法主要利用病毒之间或病毒与原核生物基因组之间的相似性来实现宿主识别。例如，VPF - Class方法，它利用从IMG/VR系统下载的病毒蛋白家族（VPFs）。通过计算查询病毒与已知宿主病毒之间的VPFs相似性，根据与VPFs的比对结果，就能对查询的每个病毒片段（contig）给出宿主预测结果。&lt;/li&gt;
&lt;li&gt;PHIST方法则是利用病毒基因组与原核生物基因组之间的序列匹配来进行宿主预测。它通过识别病毒和原核生物基因组共有的 - mers（长度为k的连续核苷酸序列），从而估计病毒 - 原核生物对形成真实相互作用（即感染关系）的概率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;利用CRISPR的比对预测&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一些原核生物会通过CRISPR（成簇的规律间隔的短回文重复序列）记录病毒感染信息以预防再次感染。部分基于比对的工具利用这一特性来预测宿主。比如使用BLAST（基本局部比对搜索工具）等方法，通过搜索原核生物和病毒之间的短序列匹配来预测宿主。然而，这种方法存在一定的局限性，因为只有2 - 10%的测序原核生物含有CRISPRs，而且很多病毒与原核生物注释或预测的CRISPRs没有比对结果，所以无法利用这一信号进行宿主预测。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;（二）基于学习的方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;基于序列特征构建模型&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;机器学习和深度学习学习基于学习的方法更加灵活，大多数这类方法是学习基于序列的特征用于宿主预测。&lt;/li&gt;
&lt;li&gt;例如，WIsH方法会针对潜在宿主基因组训练一个同质的马尔可夫模型。该模型随后计算一个原核生物基因组作为查询病毒宿主的可能性，并将可能性最高的原核生物指定为宿主。&lt;/li&gt;
&lt;li&gt;vHULK方法将宿主预测表述为一个多类别分类问题，其中输入是病毒，标签是原核生物。它在其深度学习模型中使用的特征是针对噬菌体蛋白家族pVOGs数据库的蛋白质轮廓比对结果。&lt;/li&gt;
&lt;li&gt;RaFAH方法不使用公共数据库，而是使用MMseqs2软件生成蛋白质簇并构建轮廓隐马尔可夫模型（HMMs）。然后，它利用HMM比对输出的特征并训练一个多类别随机森林模型。&lt;/li&gt;
&lt;li&gt;HoPhage是另一个基于多类别分类模型的宿主预测工具，它使用深度学习和马尔可夫链算法。它通过利用每个候选宿主基因组的编码序列（CDS）构建马尔可夫链模型，计算查询噬菌体片段感染候选宿主基因组的可能性，然后还使用一个深度学习模型，并最终将深度学习模型与马尔可夫模型的结果整合以预测宿主。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于 - mers频率和相关蛋白的特征预测&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;PHP方法利用 - mers频率，因为它可以反映病毒和宿主共享的密码子使用模式来预测宿主。&lt;/li&gt;
&lt;li&gt;DeepHost和PHIAF也利用基于 - mers的特征来训练卷积神经网络进行宿主预测。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于受体结合蛋白（RBPs）的特征预测&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Boeckaerts等人构建学习模型时使用从受体结合蛋白（RBPs）提取的特征进行宿主预测。不过，这一方法存在局限性，因为在所有病毒中注释RBPs并不容易，该作者仅收集了与九个宿主相关的RBPs，所以这个工具只能预测非常有限的宿主物种。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构建知识图谱或整合多种特征预测&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;HostG利用病毒和原核生物之间共享的蛋白质簇创建知识图谱，并训练图卷积网络进行预测。虽然它预测的准确性较高，但只能预测到属水平的主机。VHM - Net结合了病毒和原核生物之间的多种特征，如CRISPRs、WIsH的输出得分、BLASTN比对得分等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;近几年也有更多方法不断被发表出来，很难评判哪个软件最好用最准确，大家可以挑选最适合自己数据和研究问题的工具。这篇文章简要介绍一下几个我用过的软件。&lt;/p&gt;
&lt;h2 id=&#34;vpf-class基于病毒蛋白家族的病毒分类分配和宿主预测&#34;&gt;VPF-Class：基于病毒蛋白家族的病毒分类分配和宿主预测&lt;/h2&gt;
&lt;p&gt;VPF-Class是一种基于病毒蛋白家族（VPFs）信息的工具，用于对未培养病毒进行分类和宿主预测。它通过将病毒蛋白质分配到已分类的VPFs中，实现了在多个分类级别（包括Baltimore分类系统、病毒科和属）上的自动化分类和宿主预测。VPF-Class在RefSeq数据库中表现出高准确性，属级别的分类准确率接近100%，宿主预测准确率为86.4%。该工具无需下载或选择参考数据库，避免了映射过程中的偏差，使其更易于使用。VPF-Class适用于宏基因组研究、病毒发现和病毒生态学研究，帮助研究人员在没有培养条件的情况下识别新的病毒序列并预测其宿主。&lt;/p&gt;
&lt;img src=&#34;images/vpf-class.png&#34; title=&#34;&#34;/&gt;
&lt;p&gt;在VPF-Class中，主要步骤包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;VPFs的分类和宿主预测&lt;/strong&gt;：首先，对VPFs进行分类，并根据其与已知病毒的同源关系进行宿主预测。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;病毒基因组的分类和宿主预测&lt;/strong&gt;：利用分类后的VPFs对未培养病毒基因组进行分类和宿主预测。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;交叉验证和VPFs的第二轮分类&lt;/strong&gt;：通过比较未培养病毒的分类结果来更新VPFs的分类信息，以提高分类的准确性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;病毒基因组的分类和评分&lt;/strong&gt;：为每个病毒基因组提供分类和宿主预测结果，并计算相应的置信度评分。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;安装使用&#34;&gt;安装使用&lt;/h3&gt;
&lt;p&gt;在GitHub上的&lt;code&gt;biocom-uib/vpf-tools&lt;/code&gt;项目中，提供了两种安装方法：使用Docker和从源代码构建（但是我的服务器上直接没有sudo权限，docker也用不了，stack也装不了😂，只能在自己的电脑上安装了）。以下是详细的安装步骤：&lt;/p&gt;
&lt;p&gt;方法1：使用Docker&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker volume create vpf-data
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run --rm -it &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -v &lt;span class=&#34;s2&#34;&gt;&amp;#34;vpf-data:/opt/vpf-tools/vpf-data&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -v &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/seqs:/opt/vpf-tools/input-sequences:ro&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -v &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/outputs:/opt/vpf-tools/outputs:rw&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    bielr/vpf-tools &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;        vpf-class -i seqs/test.fna -o outputs/test-classified
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我尝试将本地的docker转换为HPC上的singularity来运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 在 Docker 环境下转换 sif&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run --rm -v /var/run/docker.sock:/var/run/docker.sock &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -v &lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;:/output quay.io/singularity/docker2singularity &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    bielr/vpf-tools
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker save -o vpf-tools.tar bielr/vpf-tools
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;singularity build vpf-tools.sif docker-archive://vpf-tools.tar
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir -p &lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;/vpf-data
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run --rm -v &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/vpf-data:/opt/vpf-tools/vpf-data&amp;#34;&lt;/span&gt; bielr/vpf-tools cp -r /opt/vpf-tools/vpf-data/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 在singularity环境运行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 把vpf-tools.sif和vpf-data文件夹拷贝到HPC上&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;singularity &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; --bind &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/vpf-data:/opt/vpf-tools/vpf-data&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                 --bind &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/seqs:/opt/vpf-tools/input-sequences:ro&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                 --bind &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/outputs:/opt/vpf-tools/outputs:rw&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                 vpf-tools.sif &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;        vpf-class -i seqs/test.fna -o outputs/test-classified
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;方法2：从源代码构建&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装Stack&lt;/strong&gt;：
使用以下命令安装Stack（适用于Mac OS和Linux，未在Windows上测试）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -sSL https://get.haskellstack.org/ &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;克隆仓库&lt;/strong&gt;：
克隆&lt;code&gt;vpf-tools&lt;/code&gt;仓库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/biocom-uib/vpf-tools
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; vpf-tools
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;编译工具&lt;/strong&gt;：
使用Stack编译所有目标：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;stack build
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;第一次编译可能需要一些时间，因为Stack还需要安装GHC并编译所有依赖项。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;运行工具&lt;/strong&gt;：
编译完成后，可以通过在命令前加上&lt;code&gt;stack exec --&lt;/code&gt;来运行工具，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;stack &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -- vpf-class --help
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实验性支持OpenMPI&lt;/strong&gt;：
如果需要使用OpenMPI，可以在构建时添加&lt;code&gt;--flag vpf-class:+mpi&lt;/code&gt;标志，然后像其他程序一样使用&lt;code&gt;mpirun&lt;/code&gt;运行工具。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;补充材料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分类文件&lt;/strong&gt;：
可以在这里找到VPF的分类文件，包括&lt;code&gt;index.yaml&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;单个数据文件&lt;/strong&gt;：
可以在这里下载单个数据文件，选择“VPF classification”选项卡。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HMMER模型文件&lt;/strong&gt;：
最新的包含VPF HMMER模型的文件可以从IMG/VR下载（注意：链接可能已失效，可以在这里找到一个副本）。将&lt;code&gt;final_list.hmms&lt;/code&gt;解压到数据目录中，与&lt;code&gt;index.yaml&lt;/code&gt;相邻。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;常见问题&#34;&gt;常见问题&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HMMERNotFound&lt;/strong&gt;：
确保HMMER安装正确，并且可以通过&lt;code&gt;$PATH&lt;/code&gt;访问。如果不在&lt;code&gt;$PATH&lt;/code&gt;中，可以使用&lt;code&gt;--hmmer-prefix&lt;/code&gt;指定路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ProdigalNotFound&lt;/strong&gt;：
确保Prodigal已安装，并且可以通过&lt;code&gt;$PATH&lt;/code&gt;访问。如果不在&lt;code&gt;$PATH&lt;/code&gt;中，可以使用&lt;code&gt;--prodigal&lt;/code&gt;指定可执行文件的位置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Stack安装问题&lt;/strong&gt;：
如果在安装过程中遇到问题，请参考Stack文档以确保所有依赖项都满足。（还挺难搞的😂）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Conda环境问题&lt;/strong&gt;：
由于一些用户报告了Stack和Conda的问题，建议避免在Conda污染的环境中安装Stack。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cherry图编码器模型准确预测病毒-原核宿主相互作用&#34;&gt;Cherry：图编码器模型准确预测病毒-原核宿主相互作用&lt;/h2&gt;
&lt;p&gt;在微生物群落中，感染细菌和古菌的&lt;strong&gt;原核病毒&lt;/strong&gt;是关键参与者。预测原核病毒的宿主有助于解码微生物之间的动态关系。然而，实验方法无法跟上高通量测序技术产生的噬菌体序列的快速积累，因此需要计算方法来进行宿主预测。尽管取得了一些有希望的结果，但由于已知相互作用的限制和大量测序噬菌体的数量，计算宿主预测仍然是一个挑战。目前最先进的方法在物种水平上的准确率只能达到43%。&lt;/p&gt;
&lt;img src=&#34;images/cherry.png&#34; title=&#34;&#34;/&gt;
&lt;p&gt;在这项工作中，研究者将宿主预测问题表述为一个知识图中的链接预测问题，整合了多种基于蛋白质和DNA的序列特征。研究者实现的工具名为CHERRY，可以应用于预测新发现病毒的宿主，并识别感染目标细菌的病毒。研究者展示了CHERRY在这两种应用中的实用性，并将其性能与其他11种流行的宿主预测方法进行了比较。据研究者所知，CHERRY在识别病毒-原核生物相互作用方面具有最高的准确性。它在物种水平上超越了所有现有方法，准确率提高了37%。此外，CHERRY在短片段上的表现比其他工具更稳定。&lt;/p&gt;
&lt;h3 id=&#34;安装使用-1&#34;&gt;安装使用&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;CHERRY&lt;/code&gt; 是一个用于预测病毒与原核生物基因组相互作用的 Python 库。使用 Conda 安装：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;克隆仓库&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/KennthShang/CHERRY.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;创建并激活 Conda 环境&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; CHERRY
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda env create -f CHERRY.yaml -n cherry
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda activate cherry
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;准备数据库&lt;/strong&gt;：
由于 GitHub 文件大小限制，数据库文件被压缩为 &lt;code&gt;.bz2&lt;/code&gt; 格式。需要解压这些文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; dataset
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bzip2 -d protein.fasta.bz2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bzip2 -d nucl.fasta.bz2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ../prokaryote
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gunzip *
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;激活环境&lt;/strong&gt;：
每次使用 &lt;code&gt;CHERRY&lt;/code&gt; 之前，确保激活 &lt;code&gt;cherry&lt;/code&gt; 环境：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda activate cherry
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;使用&#34;&gt;使用&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;输入文件&lt;/strong&gt;：
输入文件应该是一个包含病毒序列的 FASTA 文件。研究者提供了一个示例文件 &lt;code&gt;test_contigs.fa&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;运行命令&lt;/strong&gt;：
使用以下命令进行宿主预测：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python run_Speed_up.py &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--contigs INPUT_FA&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--len MINIMUM_LEN&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--model MODEL&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--topk TOPK_PRED&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--contigs INPUT_FA&lt;/code&gt;：输入的 FASTA 文件（默认为 &lt;code&gt;test_contigs.fa&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--len MINIMUM_LEN&lt;/code&gt;：仅对长度大于等于指定长度的序列进行预测（默认为 8000）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--model MODEL&lt;/code&gt;：使用预训练参数或重新训练的参数进行预测（默认为 &lt;code&gt;pretrain&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--topk TOPK_PRED&lt;/code&gt;：输出前 K 个预测结果（默认为 1）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python run_Speed_up.py --contigs test_contigs.fa --len &lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt; --model pretrain --topk &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;输出文件&lt;/strong&gt;：
输出文件格式为 CSV 文件（&lt;code&gt;final_prediction.csv&lt;/code&gt;），包含每个病毒的预测结果。列 &lt;code&gt;contig_name&lt;/code&gt; 是输入文件的访问号。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;生成分类树&lt;/strong&gt;：
使用以下命令将预测结果转换为完整的分类树：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python run_Taxonomy_tree.py &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--k TOPK_PRED&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;需要指定 &lt;code&gt;k&lt;/code&gt; 来生成树，输出文件为 &lt;code&gt;Top_k_prediction_taxonomy.csv&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;扩展病毒-原核生物相互作用数据库&#34;&gt;扩展病毒-原核生物相互作用数据库&lt;/h4&gt;
&lt;p&gt;如果有比预训练模型更多的病毒-原核生物相互作用信息，可以添加它们来训练自定义模型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;添加病毒基因组&lt;/strong&gt;：
将病毒基因组添加到 &lt;code&gt;nucl.fasta&lt;/code&gt; 文件中，并运行 &lt;code&gt;python refresh.py&lt;/code&gt; 以生成新的 &lt;code&gt;protein.fasta&lt;/code&gt; 和 &lt;code&gt;database_gene_to_genome.csv&lt;/code&gt; 文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;添加宿主分类信息&lt;/strong&gt;：
在 &lt;code&gt;dataset/virus.csv&lt;/code&gt; 中添加宿主分类信息。表头为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Accession（病毒）&lt;/li&gt;
&lt;li&gt;Superkingdom&lt;/li&gt;
&lt;li&gt;Phylum&lt;/li&gt;
&lt;li&gt;Class&lt;/li&gt;
&lt;li&gt;Order&lt;/li&gt;
&lt;li&gt;Family&lt;/li&gt;
&lt;li&gt;Genus&lt;/li&gt;
&lt;li&gt;Species（必填）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;添加原核生物基因组&lt;/strong&gt;：
将原核生物基因组放入 &lt;code&gt;prokaryote/&lt;/code&gt; 文件夹，并在 &lt;code&gt;dataset/prokaryote.csv&lt;/code&gt; 中添加条目。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;重新训练模型&lt;/strong&gt;：
使用 &lt;code&gt;retrain&lt;/code&gt; 作为 &lt;code&gt;--mode&lt;/code&gt; 参数运行程序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python run_Speed_up.py --mode retrain
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;预测感染特定原核生物的病毒&#34;&gt;预测感染特定原核生物的病毒&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;输入文件&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将原核生物基因组放入 &lt;code&gt;new_prokaryote/&lt;/code&gt; 文件夹。&lt;/li&gt;
&lt;li&gt;提供一个包含病毒序列的 FASTA 文件。&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;database/prokaryote.csv&lt;/code&gt; 中添加分类信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;运行命令&lt;/strong&gt;：
使用以下命令进行预测：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python run_Speed_up.py &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--mode MODE&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--t THRESHOLD&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--mode MODE&lt;/code&gt;：切换模式为预测病毒或宿主（&lt;code&gt;prokaryote&lt;/code&gt; 或 &lt;code&gt;virus&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--t THRESHOLD&lt;/code&gt;：预测病毒的置信度阈值，阈值越高，精度越高（默认为 0.98）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python run_Speed_up.py --contigs test_contigs.fa --mode prokaryote --t 0.98
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;输出文件&lt;/strong&gt;：
输出文件格式为 CSV 文件，包含每个病毒的预测结果。列 &lt;code&gt;prokaryote&lt;/code&gt; 是给定原核生物基因组的访问号，列 &lt;code&gt;virus&lt;/code&gt; 是可能感染这些基因组的病毒列表。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;常见问题-1&#34;&gt;常见问题&lt;/h4&gt;
&lt;p&gt;如果程序输出错误（通常是由于机器配置问题）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Error: mkl-service + Intel&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;R&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; MKL: &lt;span class=&#34;nv&#34;&gt;MKL_THREADING_LAYER&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;INTEL is incompatible with libgomp.so.1 library.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以尝试在运行 &lt;code&gt;run_Speed_up.py&lt;/code&gt; 之前执行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;MKL_SERVICE_FORCE_INTEL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果不想上面这样安装到本地或者很难运行成功，可以使用作者提供的在线网站phabox（https://phage.ee.cityu.edu.hk/phabox），可以直接上传文件进行预测。还是比较方便且运行较快的。&lt;/p&gt;
&lt;h2 id=&#34;ipev深度学习鉴定原核真核病毒衍生序列&#34;&gt;IPEV：深度学习鉴定原核/真核病毒衍生序列&lt;/h2&gt;
&lt;p&gt;上面👆的CHERRY是只能鉴定潜在的原核生物宿主，而IPEV可以准确预测原核/真核病毒，可以作为一个扩充。&lt;/p&gt;
&lt;p&gt;通过病毒样颗粒富集获得的病毒组包含原核和真核病毒来源的片段混合物。准确识别和分类这些元素对于理解它们在微生物群落中的作用和功能至关重要。然而，病毒基因组的快速突变率对开发高性能分类工具提出了挑战，可能会限制下游分析。&lt;/p&gt;
&lt;img src=&#34;images/IPEV.png&#34; title=&#34;&#34;/&gt;
&lt;p&gt;研究者提出了一种新颖的方法 IPEV，用于区分病毒组中的原核和真核病毒。该方法结合了二维卷积神经网络，利用三核苷酸对的相对距离和频率进行识别。IPEV 的交叉验证评估显示其在独立测试集上的精度处于领先地位，与现有方法相比，在查询病毒与已知病毒序列相似性低于 30% 的情况下，F1 分数显著提高了约 22%。此外，IPEV 在海洋和肠道病毒组样本上的准确性优于基于序列比对注释的其他方法。IPEV 相较于现有方法在同一计算配置下最多减少了 1,225 倍的运行时间。研究者还利用 IPEV 分析纵向样本，发现肠道病毒组比以往观察到的持久个人病毒组展现出更高的时间稳定性，为个体肠道病毒组的韧性提供了新的见解。&lt;/p&gt;
&lt;p&gt;IPEV 是一种高性能、用户友好的工具，帮助生物学家在病毒组中识别和分类原核和真核病毒。该工具可在 &lt;a class=&#34;link&#34; href=&#34;https://github.com/basehc/IPEV&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;IPEV GitHub 仓库&lt;/a&gt; 或 &lt;a class=&#34;link&#34; href=&#34;https://hub.docker.com/r/dryinhc/ipev_v1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker Hub&lt;/a&gt; 获取。IPEV 基于 Python3.8.6 和 TensorFlow 2.3.1 构建，通过并行处理和算法优化，能够快速获得计算结果。&lt;/p&gt;
&lt;h3 id=&#34;安装使用-2&#34;&gt;安装使用&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;IPEV&lt;/code&gt; 是一个用于识别病毒组数据中原核和真核病毒序列的深度学习软件工具。以下是安装和使用 &lt;code&gt;IPEV&lt;/code&gt; 的详细步骤：&lt;/p&gt;
&lt;p&gt;方法一：从 GitHub 使用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;克隆仓库&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/basehc/IPEV.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;创建新环境&lt;/strong&gt;（推荐以避免与现有包冲突）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;Conda&lt;/code&gt;：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda create -n your_env_name &lt;span class=&#34;nv&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;3.8.6
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda activate your_env_name
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;virtualenv&lt;/code&gt;：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python3 -m venv /path/to/new/virtual/environment
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; /path/to/new/virtual/environment/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置操作环境&lt;/strong&gt;：
进入项目目录并安装必要的依赖项：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; IPEV
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python -m pip install -r requirements.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法二：从 Docker Hub 使用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;拉取镜像&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker pull dryinhc/ipev_v1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;运行容器&lt;/strong&gt;：
打开一个新的终端窗口并运行以下命令以启动基于镜像的容器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run -it --rm dryinhc/ipev_v1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;传输数据文件&lt;/strong&gt;：
在新的终端窗口中，将数据文件传输到容器内：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker cp data.fasta dryinhc/ipev_v1:/app/tool/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在容器内运行程序&lt;/strong&gt;：
切换到容器内并运行程序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -it &amp;lt;container_id&amp;gt; /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; tool
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python run.py data.fasta
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;退出容器&lt;/strong&gt;：
按 &lt;code&gt;Ctrl+D&lt;/code&gt; 或输入 &lt;code&gt;exit&lt;/code&gt; 退出容器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;使用-1&#34;&gt;使用&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基本使用&lt;/strong&gt;：
进入 &lt;code&gt;IPEV&lt;/code&gt; 目录并运行示例文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ./IPEV
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python run.py example.fasta
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;去除非病毒序列&lt;/strong&gt;：
&lt;code&gt;IPEV&lt;/code&gt; 提供了一个功能来过滤掉病毒组数据中的非病毒成分。使用以下命令启用该功能（默认为关闭）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python run.py example.fasta -filter yes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;序列评分文件&lt;/strong&gt;：程序会生成一个 TSV 文件，包含每个序列的最终评分，存储在以当前日期和时间命名的文件夹中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;评分直方图&lt;/strong&gt;：程序还会创建一个直方图，显示不同评分在 FASTA 文件中序列中出现的频率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了节省时间，最好将所有序列放在一个单独的 FASTA 文件中，这样程序可以更快地处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果需要去除非病毒序列，请确保在运行时使用 &lt;code&gt;-filter yes&lt;/code&gt; 参数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Joan Carles Pons, David Paez-Espino, Gabriel Riera, Natalia Ivanova, Nikos C Kyrpides, Mercè Llabrés, VPF-Class: taxonomic assignment and host prediction of uncultivated viruses based on viral protein families, Bioinformatics, Volume 37, Issue 13, July 2021, Pages 1805–1813, &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1093/bioinformatics/btab026&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doi.org/10.1093/bioinformatics/btab026&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jiayu Shang, Yanni Sun, CHERRY: a Computational metHod for accuratE pRediction of virus–pRokarYotic interactions using a graph encoder–decoder model, Briefings in Bioinformatics, Volume 23, Issue 5, September 2022, bbac182, &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1093/bib/bbac182&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doi.org/10.1093/bib/bbac182&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hengchuang Yin, Shufang Wu, Jie Tan, Qian Guo, Mo Li, Jinyuan Guo, Yaqi Wang, Xiaoqing Jiang, Huaiqiu Zhu, IPEV: identification of prokaryotic and eukaryotic virus-derived sequences in virome using deep learning, GigaScience, Volume 13, 2024, giae018, &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1093/gigascience/giae018&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doi.org/10.1093/gigascience/giae018&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>一些基于宏基因组的巨型病毒研究</title>
        <link>https://jb-cao.github.io/Cao-blog/p/giant-virus-res/</link>
        <pubDate>Mon, 02 Dec 2024 00:00:00 +0000</pubDate>
        
        <guid>https://jb-cao.github.io/Cao-blog/p/giant-virus-res/</guid>
        <description>&lt;img src="https://jb-cao.github.io/Cao-blog/p/giant-virus-res/images/gvmags2.png" alt="Featured image of post 一些基于宏基因组的巨型病毒研究" /&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;上次已经介绍了&lt;a class=&#34;link&#34; href=&#34;https://asa-blog.netlify.app/p/giant-virus/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;巨型病毒&lt;/a&gt;的一些基本内容，也讲到了不依赖培养的方法是从环境样本中发现巨型病毒基因组成的不可或缺的工具。可以通过基因组解析宏基因组学来从环境序列数据中获取 NCLDV 基因组并进行深入研究如功能基因，宿主，进化等等。这次介绍一些基于宏基因组的巨型病毒研究：&lt;/p&gt;
&lt;h2 id=&#34;全球宏基因组学揭示巨型病毒多样性和宿主相互作用&#34;&gt;全球宏基因组学揭示巨型病毒多样性和宿主相互作用&lt;/h2&gt;
&lt;p&gt;作者利用快速增加的公开宏基因组数据，从全球采样点重建了 2,074 个 NCLDV 基因组。这导致系统发育多样性增加了 11 倍，功能多样性也相应增加了 10 倍。使用宏基因组数据对来自大型和巨型病毒的 58,023 个主要衣壳蛋白进行分析，揭示了这些病毒的全球分布模式和世界性本质。
所发现的病毒基因组编码了多种在光合作用和不同底物运输过程中具有推定作用的蛋白质，表明宿主重编程可能是 NCLDV 中的常见策略。此外，水平基因转移的推论将病毒谱系与不同的真核宿主联系起来。作者预计在此描述的 NCLDV 的全球多样性将使巨型病毒（与大多数主要真核生物谱系相关）成为地球生物群落生态系统中的重要参与者。&lt;/p&gt;
&lt;img src=&#34;images/gvmags1.webp&#34; title=&#34;&#34;/&gt;
&lt;p&gt;作者使用了多步宏基因组数据挖掘、分箱和迭代过滤流程，从 8,535 个公开可用的宏基因组中恢复了代表 2,074 个假定 NCLDV 群体的基因组，置于综合微生物基因组和微生物组 (IMG/M) 数据库。核质病毒直系同源基因（NCVOG）的组装大小、GC含量、编码密度和拷贝数与之前描述的NCLDV基因组相当，支持将这些基因组分类为巨型病毒宏基因组组装基因组（GVMAG）。使用依赖于保守 NCVOG 的方法，作者估计了基因组完整性和污染，从而对 773 个高质量、989 个中等质量和 312 个低质量 GVMAG 进行了分类，符合 MIUViG 建议。&lt;/p&gt;
&lt;img src=&#34;images/gvmags2.png&#34; title=&#34;&#34;/&gt;
&lt;p&gt;使用 GVMAG 增强现有的 NCLDV 系统发育框架大大增加了该病毒目的多样性（上图a）。由此产生的系统发育树从 205 个病毒基因组扩展到 2,279 个病毒基因组，与之前识别的 20 个属相比，这些病毒基因组现在可以分为 100 个潜在属或亚科水平的单系进化枝，跨越 10 个临时超进化枝。这意味着 NCLDV 的系统发育多样性增加了 11 倍。值得注意的是，新病毒基因组的添加并没有改变 NCLDV 树的基本拓扑结构，而是改变了现有群体（尤其是拟病毒科）对总病毒多样性的贡献。此外，谱系特异性模式中保守的 NCVOG 的存在强化了该病毒群具有共同进化起源的假设。现有分类框架内出现了没有分离株代表的新病毒群（即宏基因组巨型病毒谱系（MGVL））。为了进一步加深对 NCLDV 环境分布模式的了解，作者对所有公共宏基因组数据集的主要衣壳蛋白 (MCP) 进行了调查。作者鉴定了超过 58,000 个该蛋白质的拷贝，其中 67% 可以归属于病毒谱系（上图b）。&lt;/p&gt;
&lt;img src=&#34;images/gvmags3.png&#34; title=&#34;&#34;/&gt;
&lt;p&gt;病毒感染对其真核宿主的有害影响是众所周知的；然而，最近的一些研究表明，NCLDV 也可能补充其宿主的新陈代谢，例如，通过编码吸收氮等营养物质的转运蛋白或发酵基因。扩展这些初步发现，作者的数据表明，所有 NCLDV 超进化枝的不同谱系都编码在光合作用、不同底物运输过程、光驱动质子泵和视网膜色素中具有潜在作用的酶（上图）。代谢重编程是指细菌病毒从宿主获取基因并维持它们以支持宿主新陈代谢的一种常见现象。结果表明，以类似的方式，NCLDV 介导的宿主重编程可能是增加病毒繁殖力的重要策略，同时使受感染的真核宿主细胞具有短期竞争优势，特别是在营养有限的条件下。&lt;/p&gt;
&lt;img src=&#34;images/gvmags4.png&#34; title=&#34;&#34;/&gt;
&lt;p&gt;宿主基因的摄取是 NCLDVs进化中的常见机制。使用 HGT 分析，作者将假定的宿主分配给不同的 NCLDV 谱系。对可能经历 HGT 的 2,040 个基因的分析提供了 50 个病毒谱系与 32 组推定真核宿主的连锁信息（上图）。值得注意的是，包含分离病毒基因组的 23 个病毒谱系中有 17 个可以通过 HGT 连接到经过实验验证的天然宿主，例如大多数感染藻类的病毒和感染后生动物的子囊病毒、纳毛病毒和痘病毒，以及将克洛斯新病毒连接到动质体。作者的分析进一步证实棘阿米巴是潘多拉病毒、海象鼠病毒、水母病毒、马赛病毒和巨拟病毒的宿主。值得注意的是，作者的分析没有揭示与人类宿主的联系。作者预计，随着宿主基因组采样的改进，特别是未充分探索的原生生物和藻类的基因组，通过 HGT 进行的宿主关联将产生更全面的 NCLDV 宿主范围和进化历史图景。&lt;/p&gt;
&lt;h2 id=&#34;来自地球生态系统的巨型噬菌体进化枝&#34;&gt;来自地球生态系统的巨型噬菌体进化枝&lt;/h2&gt;
&lt;p&gt;噬菌体通常具有较小的基因组，并且依赖于其细菌宿主进行复制。在这里，作者对来自不同生态系统的 DNA 进行了测序，发现了数百个长度超过 200 kb 的噬菌体基因组，其中包括 735 kb 的基因组，据作者所知，这是迄今为止描述的最大的噬菌体基因组。手动整理了 35 个基因组以完成（圆形且无间隙）。扩展的遗传库包括多种先前未描述的 CRISPR-Cas 系统、转移 RNA (tRNA)、tRNA 合成酶、tRNA 修饰酶、翻译起始和延伸因子以及核糖体蛋白。噬菌体的 CRISPR-Cas 系统具有沉默宿主转录因子和翻译基因的能力，可能作为更大的相互作用网络的一部分，拦截翻译以将生物合成重定向到噬菌体编码的功能。此外，一些噬菌体可能会重新利用细菌 CRISPR-Cas 系统来消除竞争噬菌体。作者从系统发育上定义了来自人类和其他动物微生物组以及海洋、湖泊、沉积物、土壤和建筑环境的巨型噬菌体的主要进化枝。作者的结论是，巨大噬菌体的大量基因库反映了保守的生物策略，并且噬菌体分布在广泛的细菌宿主范围和地球生态系统中。&lt;/p&gt;
&lt;img src=&#34;images/huge1.webp&#34; title=&#34;&#34;/&gt;
&lt;p&gt;2017 年，仅发表了 93 个基因组长度超过 200 kb 的分离噬菌体。对整个群落 DNA 进行测序可以发现噬菌体衍生的片段；然而，由于碎片化，大基因组仍然可以逃脱检测。最近，根据宏基因组数据集手动整理完成的基因组，描述了人类和动物相关巨噬细胞的一个新分支9。这一发现促使作者对微生物群落进行更全面的分析，以评估具有大基因组的噬菌体的流行率、多样性和生态系统分布。此前，基因组超过 200 kb 的噬菌体被称为“jumbophages”，或者基因组超过 500 kb 的噬菌体被称为megaphages。由于这里重建的集合跨越了两个尺寸范围，作者将它们简单地称为“巨大噬菌体”。上图概述了作者的方法和主要发现。这项研究扩展了作者对噬菌体生物多样性的理解，并揭示了各种生态系统，其中噬菌体的基因组大小可与小细胞细菌相媲美。作者假设这些噬菌体已经进化出一种独特的“生命”策略，其中涉及在复制其巨大基因组时对宿主生物学进行广泛的拦截和增强。&lt;/p&gt;
&lt;p&gt;作者重建了 351 个噬菌体序列、6 个类质粒序列和 4 个未知分类序列。排除了被推断为质粒的其他序列，仅保留编码 CRISPR-Cas 位点的序列。由于 CRISPR-Cas 位点的存在，作者纳入了 3 个长度≤200 kb 的噬菌体序列。与噬菌体的分类一致，作者鉴定了多种噬菌体相关基因，包括参与裂解和编码结构蛋白的基因，并记录了噬菌体的其他预期基因组特征。一些预测的蛋白质很大，长度可达 7,694 个氨基酸；有些被暂时注释为结构蛋白。总共有 175 个噬菌体序列被环化，其中 35 个是手动完成的，在某些情况下通过解析复杂的重复区域，揭示其编码的蛋白质（方法和补充表 1）。大约 30% 的基因组显示出明显的 GC 偏差，表明存在双向复制，30% 的基因组具有表明单向复制的模式13。4 个最大的完整、手动管理和环化的噬菌体基因组长度分别为 634、636、642 和 735 kb，据作者所知，它们是迄今为止报道的最大的噬菌体基因组（2020年）。&lt;/p&gt;
&lt;img src=&#34;images/huge2.webp&#34; title=&#34;&#34; width=&#34;80%&#34;/&gt;
&lt;p&gt;一个有趣的问题与具有巨大基因组的噬菌体的进化历史有关。也就是说，它们是否是正常大小噬菌体进化枝内最近基因组扩张的结果，或者大量基因是否是一种既定的、持久的策略。为了研究这一点，作者使用公共数据库中的序列作为背景，构建了大终止酶亚基蛋白（上图）和主要衣壳蛋白的系统发育树。噬菌体基因组中的许多序列在高引导支持下聚集在一起，从而定义了进化枝。对数据库序列的基因组大小信息的分析表明，属于这些进化枝的公共序列来自基因组长度至少为 120 kb 的噬菌体。最大的进化枝，在这里被称为 Mahaphage（Maha 在梵文中是巨大的意思），包括作者所有最大的基因组以及来自人类和动物微生物组的 540-552 kb Lak 基因组。作者还发现了另外九个大型噬菌体簇，并在本文的一些作者的语言中使用“巨大”一词来指代它们。大噬菌体始终被分组为进化枝的事实表明，大的基因组大小是一个相对稳定的特征。在每个进化枝内，噬菌体都是从各种环境类型中采样的，这表明这些巨大噬菌体及其宿主在整个生态系统中的多样化。&lt;/p&gt;
&lt;p&gt;为了确定细菌宿主系统发育与噬菌体进化枝的相关程度，作者使用 CRISPR 间隔区从相同或相关样本中的细菌以及正常宿主相关噬菌体基因的系统发育中鉴定了一些噬菌体宿主。作者还测试了噬菌体基因库的细菌分类学隶属关系的预测值，发现在每种情况下，CRISPR 间隔区靶向和系统发育都与门级分类学特征一致。因此，作者使用分类学特征来预测许多噬菌体的细菌宿主门（补充表4）。结果确定了厚壁菌门和变形菌门作为宿主的重要性。与其他环境相比，人类和动物肠道中厚壁菌门感染的巨型噬菌体的患病率较高，这反映了微生物组的潜在宿主组成。值得注意的是，长度超过 634 kb 的 5 个基因组均来自预计会在拟杆菌门中复制的噬菌体，Lak 噬菌体也是如此，并且全部聚集在 Mahaphage 进化枝内。总体而言，系统发育上分组的噬菌体预计会在同一门的细菌中复制。&lt;/p&gt;
&lt;img src=&#34;images/huge3.webp&#34; title=&#34;&#34;/&gt;
&lt;p&gt;噬菌体基因组编码的蛋白质预计定位于细菌膜或细胞表面。许多噬菌体具有参与嘌呤和嘧啶的从头生物合成以及核酸和核糖核酸以及核苷酸磷酸化状态的相互转化的基因。这些基因组与具有非常小细胞和假定共生生活方式的细菌的基因组非常相似。
值得注意的是，许多噬菌体的基因具有预测的转录和翻译功能。完整的噬菌体基因组编码多达 67 个 tRNA，其序列与其宿主的序列不同。一般来说，每个基因组的 tRNA 数量随着基因组长度的增加而增加。巨大的噬菌体每个基因组有多达 15 个 tRNA 合成酶，它们也与其宿主的合成酶不同但相关。噬菌体可以利用这些蛋白质为它们自己的 tRNA 变体装载来自宿主的氨基酸。基因组的一个子集具有用于 tRNA 修饰和连接被宿主防御切割的 tRNA 的基因。
许多噬菌体携带与宿主翻译的拦截和重定向有关的基因。这些基因包括起始因子IF1和IF3，以及核糖体蛋白S4、S1、S21和L7/L12（核糖体蛋白最近才在噬菌体中报道17（上图））。 rpS1 和 rpS21 对于细菌中的翻译起始都很重要，这使得它们可能有助于劫持宿主核糖体。对 rpS21 蛋白的进一步分析揭示了 N 末端延伸，富含对 RNA 结合很重要的碱性和芳香残基。作者预测这些噬菌体核糖体蛋白会替代宿主蛋白，并且它们的延伸有助于竞争性核糖体结合或噬菌体 mRNA 的优先启动。&lt;/p&gt;
&lt;p&gt;作者鉴定了噬菌体中大多数主要的 CRISPR-Cas 系统类型，包括基于 Cas9 的 II 型、最近描述的 V-I23 型、V-U 型系统的新变体24 和 V-F 型系统的新亚型。 II 类系统（II 型和 V 型）此前尚未在噬菌体中报道过。大多数噬菌体效应核酸酶（用于干扰）具有保守的催化残基，这意味着它们具有功能。
与具有 CRISPR 系统的噬菌体案例相比，几乎所有噬菌体 CRISPR 系统都缺乏间隔区获取机制（Cas1、Cas2 和 Cas4），并且许多系统缺乏可识别的干扰基因。例如，两个相关的噬菌体具有 I-C 型变体系统，该系统缺乏 Cas1 和 Cas2，并具有解旋酶蛋白而不是 Cas3。这些噬菌体还有第二个系统，其中包含新的候选 V 型效应蛋白 CasΦ (Cas12j)，其长度约为 750 个氨基酸（图 4 和补充表 1），出现在 CRISPR 阵列附近。&lt;/p&gt;
&lt;p&gt;在某些情况下，缺乏干扰和间隔区整合基因的噬菌体与宿主具有相似的CRISPR重复序列，因此可能使用宿主的Cas蛋白。或者，缺乏效应核酸酶的系统可能会抑制靶序列的转录而不发生裂解。此外，间隔重复引导RNA可能具有类似RNA干扰的机制来沉默宿主CRISPR系统或它们可以杂交的核酸。噬菌体编码的 CRISPR 阵列通常很紧凑，该范围远小于原核基因组中常见的范围。一些噬菌体间隔区针对其他噬菌体的核心结构和调节基因。因此，噬菌体显然增强了宿主的免疫库，以防止竞争性噬菌体的感染。&lt;/p&gt;
&lt;p&gt;一些感染假单胞菌的大型噬菌体编码抗 CRISPRs (Acrs) 和蛋白质，这些蛋白质组装成核样区室，将其复制基因组与宿主防御和其他细菌系统隔离开来。作者鉴定了巨大噬菌体基因组中编码的蛋白质，这些蛋白质与 AcrVA5、AcrVA2、AcrIIA7 和 AcrIIA11 聚集在一起，并且可能具有 Acrs 的功能。作者还鉴定了微管蛋白同源物 (PhuZ) 和蛋白质，它们可产生蛋白质噬菌体“细胞核”。最近表明噬菌体核可以通过物理阻止 CRISPR-Cas 系统的降解来保护噬菌体基因组免受宿主防御。&lt;/p&gt;
&lt;h2 id=&#34;全球巨型病毒的基因组进化动态和病毒细胞代谢&#34;&gt;全球巨型病毒的基因组进化动态和病毒细胞代谢&lt;/h2&gt;
&lt;p&gt;真核巨型病毒的发现改变了作者对病毒复杂性极限的理解，但其编码代谢多样性的程度仍不清楚。在这里，作者从全球环境中生成了 501 个核胞质大 DNA 病毒 (NCLDV) 的宏基因组组装基因组，并分析了它们的编码功能能力。作者报告了广泛分布的巨型病毒中代谢基因的显著多样性，包括许多与营养吸收、光捕获和氮代谢有关的基因。令人惊讶的是，许多 NCLDV 编码糖酵解和 TCA 循环的成分，这表明它们可以重新编程宿主中心碳代谢的基本方面。
作者对 NCLDV 代谢基因及其细胞同源物的系统发育分析揭示了病毒序列不同的聚类，形成不同的分支，表明这些基因是病毒特异性的，并且是在遥远的过去获得的。总的来说，作者的研究结果表明，巨型病毒编码复杂的代谢能力，其进化历史很大程度上独立于细胞生命，强烈暗示它们是全球生物地球化学循环的重要驱动因素。&lt;/p&gt;
&lt;p&gt;为了解决有关环境中 NCLDV 的基因组多样性、进化关系和病毒细胞代谢的关键问题，作者开发了一个工作流程，从公开的宏基因组数据中生成 NCLDV 的宏基因组组装基因组 (MAG)。作者调查了 1545 个宏基因组，并从大小范围为 100 至 1400 kbp 的单个样本中生成了 501 个新型 NCLDV MAG。作者的工作流程包括去除可能源自细胞生物或噬菌体的重叠群的步骤，以及最大限度地减少每个 MAG 中可能的菌株异质性。为了确保作者的 NCLDV MAG 代表几乎完整的基因组，作者只保留了至少包含 5 个关键 NCLDV 标记基因中的 4 个的 MAG，这些基因已知在这些病毒中高度保守11，并且总长度 &amp;gt; 100Kbp。大多数 MAG 是从海洋和淡水环境中产生的（分别为 444 和 36），但作者还在生物反应器、废水处理厂、油田和土壤样本的宏基因组中发现了 21 个。&lt;/p&gt;
&lt;img src=&#34;images/gd1.png&#34; title=&#34;&#34;/&gt;
&lt;p&gt;作者使用先前用于这些病毒系统发育分析的 5 个高度保守的基因，构建了 NCLDV MAG 的多位点系统发育树以及 121 个参考基因组（上图）。大多数 MAG 属于 Mimiviridae 和 Phycodnaviridae 家族（分别为 350 和 126），但作者还在 Iridoviridae、Asfarviridae、Marseillviridae和 Pithoviridae中鉴定了新基因组。作者的研究中对大量拟病毒科成员的鉴定与之前的分析一致，表明该科在海洋系统中具有高度多样性。
作者的系统发育表明，藻类DNA病毒科是多系的，并且至少由两个不同的单系群组成，其中一个是拟拟病毒科的姐妹群（称为晚期藻类DNA病毒科，108个MAG），另一个是拟拟病毒科-晚期藻类DNA病毒科分支的基础分支（称为“晚期藻类DNA病毒科”）早期藻类DNA病毒科，18 MAG）。尽管最近的一项研究报告了另一种拓扑结构，其中 Asfarviridae 也属于这个更广泛的组，但先前已根据串联标记基因系统发育提出了藻类DNA病毒科和拟菌病毒科组合的单系性。除了系统发育之外，作者还评估了 NCLDV 基因组之间的成对平均氨基酸同一性 (AAI)，以评估基因组差异。 AAI 值提供的结果与作者的系统发育分析基本一致，并显示科内 AAI 值范围为 26% 至 100%（上图b），突出显示即使是同一科内的 NCLDV 基因组之间也存在显著的序列差异。&lt;/p&gt;
&lt;img src=&#34;images/gd2.png&#34; title=&#34;&#34;/&gt;
&lt;p&gt;为了评估 NCLDV 家族中蛋白质家族的多样性，作者计算了 MAG 和 126 个参考基因组之间的直系同源群 (OG)，从而得到 81,411 个 OG。其中，只有 21,927 个 (27%) 与 EggNOG、Pfam、TigrFam 和 VOG 数据库中已知的蛋白质家族具有可检测的同源性，这凸显了在其他研究中观察到的 NCLDV 基因组中存在大量新基因。此外，55,692 (68%) 的 OG 仅存在于一个 NCLDV 基因组（单例 OG）中，总体而言，蛋白质家族成员的程度分布仅揭示了少数广泛共享的蛋白质家族（上图a、b），与一般 dsDNA 病毒所显示的结果一致。为了可视化 NCLDV 中的基因共享模式，作者构建了一个二分网络，其中可以表示基因组和 OG（上图 c）。
对该网络的分析主要揭示了科级聚类，拟菌病毒科以及早期和晚期藻类DNA病毒科彼此靠近，而皮托病毒科、马氏病毒科和痘病毒科分别聚类。有趣的是，虽然潘多拉病毒是早期藻类DNA病毒科分支的成员，但它们独立聚集在一个小子网络中，表明该组中特别大的基因组和新颖的基因组库与所有其他NCLDV不同。这些模式表明，NCLDV 中的基因组内容部分是由进化历史决定的，但基因组内容的大规模增加或减少可能会在短时间内发生，类似于潘多拉病毒中发生的情况。这表明，在漫长的进化时间尺度上，NCLDV 的基因组进化是由垂直遗传和 LGT 混合形成的，在许多方面至少在质量上与细菌和古细菌相似。&lt;/p&gt;
&lt;img src=&#34;images/gd3.png&#34; title=&#34;&#34;/&gt;
&lt;p&gt;引人注目的是，许多 NCLDV 基因组编码参与中心碳代谢的基因，包括大多数糖酵解、糖异生、TCA 循环和乙醛酸分流酶（上图4a）。中心碳代谢通常被认为是细胞生命的基本特征，因此值得注意的是，巨型病毒累积地编码了这些途径的几乎每一步。这些基因在拟菌病毒分支 1、9 和 16 中特别丰富，但其中一些基因也存在于几种藻DNA病毒科成员中。糖酵解酶甘油醛-3-磷酸脱氢酶 (G3P)、磷酸甘油酸变位酶 (PGM) 和磷酸甘油酸激酶 (PGK)，以及 TCA 循环酶乌头酸酶和琥珀酸脱氢酶 (SDH) 特别普遍。此外，作者在 16 个 MAG 中发现了一个编码糖酵解酶 G3P 和 PGK 的融合基因，它们执行糖酵解中的相邻步骤，代表了以前在细胞谱系中未报道过的独特结构域结构。
有趣的是，在许多 MAG 中，TCA 循环基因共定位于病毒重叠群上，这表明这些基因在感染过程中可能存在共同调节（上图c）。值得注意的是，一种 NCLDV MAG (ERX552257.96) 编码了糖酵解 10 个步骤中的 7 个步骤（上图d），这突显了一些巨型病毒可以从宿主中实现高度的代谢独立性。病毒编码不同中央代谢途径的这些成分，这一事实强调了它们通过操纵细胞内碳通量从根本上重新编程病毒细胞代谢的潜力。&lt;/p&gt;
&lt;p&gt;病毒历来被视为细胞生命的附属品，因此它们对生物地球化学循环的影响在很大程度上是通过它们对宿主死亡率的影响来看待的，而不是通过它们本身的任何直接代谢活动来看待。作者在这项研究中揭示的 NCLDV 基因组中编码的大量细胞代谢基因揭示了另一种观点，即病毒特异性酶在塑造病毒细胞生理学方面具有直接作用。在全球水生环境中的病毒感染范围内，这提出了病毒酶本身可以大幅改变全球生物地球化学通量的可能性。此外，病毒代谢基因独特的进化谱系表明 NCLDV 是代谢创新的独特驱动力，这与传统观点形成鲜明对比，传统观点认为它们只是细胞基因的偶尔扒手，而不是事实上的进化创新者。总而言之，这些发现表明，正如微生物被认为是塑造全球生物地球化学循环的引擎一样，病毒也应该与它们的细胞对应物一起被视为具有自身编码生理学的代谢流代理。&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Schulz, F., Roux, S., Paez-Espino, D. et al. Giant virus diversity and host interactions through global metagenomics. Nature 578, 432–436 (2020). &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1038/s41586-020-1957-x&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doi.org/10.1038/s41586-020-1957-x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Al-Shayeb, B., Sachdeva, R., Chen, LX. et al. Clades of huge phages from across Earth’s ecosystems. Nature 578, 425–431 (2020). &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1038/s41586-020-2007-4&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doi.org/10.1038/s41586-020-2007-4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Moniruzzaman, M., Martinez-Gutierrez, C.A., Weinheimer, A.R. et al. Dynamic genome evolution and complex virocell metabolism of globally-distributed giant viruses. Nat Commun 11, 1710 (2020). &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1038/s41467-020-15507-2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doi.org/10.1038/s41467-020-15507-2&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>巨型病毒(Giant virus)生物学和多样性研究</title>
        <link>https://jb-cao.github.io/Cao-blog/p/giant-virus/</link>
        <pubDate>Mon, 02 Dec 2024 00:00:00 +0000</pubDate>
        
        <guid>https://jb-cao.github.io/Cao-blog/p/giant-virus/</guid>
        <description>&lt;img src="https://jb-cao.github.io/Cao-blog/p/giant-virus/images/gv2.png" alt="Featured image of post 巨型病毒(Giant virus)生物学和多样性研究" /&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;大型和巨型病毒是双链 DNA 病毒的一部分，即&lt;strong&gt;核质大DNA病毒&lt;/strong&gt; (NCLDV, nucleocytoplasmic large DNA viruses)，构成病毒门 Nucleocytoviricota。
该门的病毒感染多种真核宿主，从已知最小的单细胞领鞭毛虫到多细胞动物。 NCLDV 通常在宿主细胞质中构建的所谓&lt;strong&gt;病毒工厂&lt;/strong&gt;中复制，或使用宿主细胞核复制，有时组装其后代。这些病毒的标志性特征是&lt;strong&gt;基因组范围从 70 kb 到 2.5 Mb 不等，病毒粒子长度可达 2 μm 以上&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;“巨型病毒”一词最初是在 20 世纪 90 年代创造的，当时感染藻类的病毒明显具有异常大的基因组，此外，在 2000 年代初期，第一个基因组在兆碱基范围内的病毒被发现；最初的光学显微镜观察得出这样的假设：其颗粒对应于变形虫革兰氏阳性细菌病原体。更详细的超微结构分析揭示了典型的二十面体形状的病毒粒子，并且基因组测序产生了 1.2 Mb 的病毒基因组。
这种病毒被命名为“mimivirus”，是“微生物模仿病毒”的缩写，代表了病毒圈中意想不到的新颖性，不仅因为其特殊的颗粒和基因组大小，而且还因为它包含多个具有可能作用的基因，因此具有编码潜力蛋白质生物合成。
自从巨型病毒被发现以来，它们的编码潜力充满了惊喜，并且细胞生命标志基因的存在导致了这样的假设：这些病毒可能代表生命的神秘第四域。同样有趣的是，人们发现更小的病毒（所谓的病毒噬菌体）可以感染一些仅具有细胞质感染周期的 NCLDV；噬病毒体寄生并有时杀死宿主。还发现了第三个伙伴，称为“transpoviron”，它对应于 7kb 双链 DNA 附加体，能够使用巨型病毒和噬病毒体颗粒作为载体进行繁殖。&lt;/p&gt;
&lt;p&gt;十多年来，巨型病毒主要通过基于培养的方法进行研究，直到最近，病毒学追随微生物基因组学的脚步，应用不依赖培养的宏基因组学以无与伦比的速度研究这些病毒的进化多样性和代谢潜力。
研究者探索了大量的实验数据，这些数据揭示了对巨型病毒生物学的许多见解，特别是它们的病毒颗粒结构和独特的感染策略。研究者通过整合最新的基于序列的研究来建立这些知识，这些研究扩展了 NCLDV 多样性、生物地理学、编码潜力和假定的宿主范围。此外，研究者讨论了令人信服的证据，表明巨型病毒基因组中存在多种细胞标志基因，使病毒能够重新编程宿主代谢，并且巨型病毒遗传物质整合到宿主基因组中可能会影响真核细胞的生物学和进化。&lt;/p&gt;
&lt;h2 id=&#34;通过分离发现巨型病毒&#34;&gt;通过分离发现巨型病毒&lt;/h2&gt;
&lt;p&gt;最早发现的 NCLDV 是痘病毒科，其中包括天花的病原体，是 130 多年前在显微镜下看到的第一个病毒颗粒。感染小球藻绿藻的大型病毒在 20 世纪 80 年代被分离出来。痘苗病毒（一种痘病毒）和草履虫小球藻病毒 1 (PBCV1) 的第一个基因组分别于 20 世纪 90 年代初和 1999 年进行了测序。
此后不久，对痘病毒科的其他基因组进行了测序（图 1），其大小范围从 120 kb 到 360 kb。
随后，发现了感染动物的其他病毒，包括子囊病毒科、虹彩病毒科和阿斯法病毒科的成员，并对它们的基因组进行了测序。这些类群中的病毒基因组相对较小（最多 220kb），最近发现的与虾相关的小核病毒科病毒的基因组更小（70-80kb）。
除了感染动物的 NCLDV 外，2000 年代初期，在各种真核藻类中也检测到了多种 NCLDV，包括叶绿藻、附着藻、深海藻、褐藻和甲藻。这些与藻类相关的 NCLDV 被分类为 Phycodnaviridae 和 Mesomimiviridae，尽管它们的大部分基因组约为 200–500 kb，但 Tetraselmis 病毒和 Prymnesium kappa 病毒 RF01 的基因组为 668 kb和 1.4 Mb。&lt;/p&gt;
&lt;img src=&#34;images/gv1.png&#34; title=&#34;&#34;/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;图 1：核质病毒门中依赖于培养和不依赖于培养的重要发现的时间线。&lt;/strong&gt; 堆叠柱状图表示每年在NCBI GenBank数据库中发布或可用的核质病毒门（Nucleocytoviricota）成员的病毒分离基因组（蓝色；左y轴）和巨型病毒宏基因组组装基因组（GVMAGs；红色；左y轴）的数量（x轴为年份）。实心圆点表示病毒分离基因组和GVMAGs的组装大小（右y轴）。重要的基于培养的事件以绿色星星标注：(1) 首次分离巨型病毒（Paramecium bursaria chlorella virus 1）。(2) 通过阿米巴共培养分离出mimivirus。(3) 与其宿主Cafeteria roenbergensis一起分离巨型病毒。(4) 分离出基因组大小达2.5 Mb的瓶状pandoravirus。(5) 通过与阿米巴共培养，从一块3万年前的冰芯中恢复出pithovirus。(6) 通过与Vermamoeba vermiformis共培养分离出faustovirus。(7) 分离出Bodo saltans virus，这是Klosneuvirinae亚科中首个具有原生宿主（动力鞭毛虫）的分离成员。(8) 从阿米巴中分离出tupanvirus，目前是基于衣壳直径和长度最大的巨型病毒。(9) 从阿米巴中分离出medusavirus，代表核质病毒门中的一个新的分化谱系。
重要的基因组和宏基因组事件以黄色星星标注：(1) 核质病毒门成员的首批基因组被测序：Vaccinia virus (1a) 和 Paramecium bursaria chlorella virus 1 (1b)。(2) 测序了第一个基因组大小超过1 Mb的巨型病毒：Acanthamoeba polyphaga mimivirus。(3) 首次从南极洲有机湖恢复出GVMAGs。(4) 基于从环境序列数据中恢复的GVMAGs提出了病毒亚科Klosneuvirinae。(5) 利用单细胞基因组学从海洋领鞭毛虫中发现了Choanovirus。(6) 首次大规模全球宏基因组研究，恢复了超过2000个GVMAGs，实现了系统发育多样性增加11倍和功能多样性扩展10倍。(7) 在宿主染色体中检测到完整的巨型病毒基因组整合。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;继 2003 年发现拟菌病毒之后，其他具有较大病毒粒子和基因组超过 500 kb 的 NCLDV 也被发现可以感染异养原生生物（主要是变形虫动物门的成员）。十多年来，棘阿米巴菌株主要用作共培养新病毒的宿主，导致经常分离出能够感染这种单细胞宿主的密切相关的巨型病毒。
棘阿米巴属已被证明是许多 Megamimivirinae 和 Marseilleviridae 特别合适的宿主。因此，来自这些分类群的病毒是目前最常培养的 NCLDV 之一，公共数据库中有 30 多个基因组序列，包括新的 Megamimivirinae 谱系 tupanvirus 和 cotonvirus。共培养方法取得了广泛的成功，并且还从不同的 NCLDV 分支中恢复了分离株，促进了 Pithoviruses、Pandoraviruses、molliviruses 和 medusaviruses 的组织和命名。
最近，使用替代宿主，如 Vermamoeba spp.，得到了几种新的 faustovirus 分离株、orpheovirus、pacmanvirus 和 kaumoebavirus 的共同培养——它们都是 Pithovirus、marseillevirus 和 Asfarvirus 的远亲。
新开发的基于高通量共培养的方法使用高内涵筛选显微镜，已被证明是发现和分离巨型病毒的宝贵工具。然而，共培养受到巨型病毒宿主特异性的限制；一些 NCLDV 谱系只能感染特定宿主，例如某些棘阿米巴物种，而其他谱系可能更加通用，表现出更广泛的宿主范围 。考虑到真核生物，特别是微真核生物的巨大多样性，通过分离回收的巨型病毒很可能只反映了野外现存 NCLDV 谱系的一小部分。&lt;/p&gt;
&lt;h2 id=&#34;病毒体结构和感染策略&#34;&gt;病毒体结构和感染策略&lt;/h2&gt;
&lt;h3 id=&#34;具有核质感染周期的病毒&#34;&gt;具有核质感染周期的病毒&lt;/h3&gt;
&lt;p&gt;Chloroviruses是第一个被称为“巨型病毒”的病毒，因为它们具有直径为 190 nm 的大二十面体病毒粒子（T 号 169）（图 2）和高达 370 kb 的基因组。
特别是，PBCV1被广泛研究；它的衣壳有一些从一些衣壳延伸出来的外部纤维，并且在一个顶点存在一个尖峰状结构，以锚定在宿主细胞上（图2）。衣壳被病毒编码的糖基化机器合成的不寻常的寡糖糖基化；该寡糖与主要衣壳蛋白 (MCP；Vp54) 中的非典型序列片段中的天冬酰胺进行 N 连接。
外衣壳层覆盖单个脂质膜，这对于感染性至关重要。Chloroviruses通过使用包装在病毒粒子中的病毒编码酶在细胞壁上创建一个洞，将其基因组传递到藻类宿主中。然后病毒内膜与宿主质膜融合，形成基因组和一些病毒蛋白进入细胞的通道。由于病毒不编码 RNA 聚合酶，因此传入的基因组必须在病毒粒子在细胞质中组装之前在宿主细胞核内转录。病毒粒子在宿主细胞裂解后释放。&lt;/p&gt;
&lt;img src=&#34;images/gv2.png&#34; title=&#34;&#34;/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;图2：巨型病毒感染机制和病毒体结构。&lt;/strong&gt; A | 巨型病毒通过附着于宿主细胞膜进入宿主细胞，随后通过内吞作用（a）或衣壳开启后的膜融合（b）实现入侵。随后，巨型病毒的转录过程在细胞质或病毒工厂中启动（c；紫色箭头），或在宿主细胞核中启动（d；绿色箭头）。在细胞质病毒工厂的外围，基因组复制和新病毒颗粒的组装随之发生（e），或者新合成的病毒颗粒分散在一个大的细胞质病毒工厂中（f）。最后，病毒颗粒通过宿主细胞裂解（g）、含病毒颗粒的液泡与宿主细胞膜融合（h）或膜包裹的病毒颗粒通过胞吐作用（i）被释放。小彩色圆点表示病毒基因组和病毒蛋白。B| 部分巨型病毒的感染策略。C| 镶嵌在树脂中的非二十面体病毒超薄切片的透射电子显微图。D| 使用冷冻电子显微镜解析的分离巨型病毒结构。注意mimivirus的蓝色星门结构。C和D部分的比例尺为100nm。&lt;br&gt;
缩写：AaV（Aureococcus anophagefferens病毒），CroV（Cafeteria roenbergensis病毒），OtV（Ostreococcus tauri病毒），PBCV1（Paramecium bursaria chlorella病毒1）。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;其他感染藻类的核质病毒由小病毒颗粒组成。核质病毒门中最小的成员是病毒颗粒直径约为 120 nm 且基因组长达 410 kb 的病毒。体积小对于金牛骨球菌Ostreococcus tauri的感染和复制至关重要，金牛骨球菌是最小的自由生活真核生物之一，细胞大小仅为 0.8μm。病毒感染后，基因组被释放到细胞核中，并且几乎立即开始复制。数小时内，新病毒粒子在细胞质中组装，不到 24 小时，宿主裂解发生。在此期间，宿主细胞核、线粒体和叶绿体保持完整。&lt;/p&gt;
&lt;p&gt;具有核质感染周期的较大病毒是变形虫感染的潘多拉病毒pandoraviruses，其双耳瓶形状的病毒体长度可达 1 µm，直径达 500 nm（图 2），基因组可达 2.5 Mb。厚皮层内至少有一层脂质膜，该皮层由三层组成，其中一层由纤维素制成。颗粒通过吞噬作用被吸收，顶端的小孔状结构打开，使内膜与吞噬体膜融合；这导致基因组和必需的蛋白质被递送到宿主细胞质中。尽管潘多拉病毒编码RNA聚合酶，但该酶并未包装在衣壳中，因此，感染病毒依赖宿主细胞进行病毒基因的早期转录。在细胞核内建立的病毒工厂（图 2），新的病毒粒子开始从顶端组装，脂质囊泡被招募到病毒工厂用于病毒粒子组装。新生病毒粒子通过细胞裂解释放，或者如果病毒位于液泡内，则通过与质膜的膜融合的胞吐作用释放。&lt;/p&gt;
&lt;p&gt;Molliviruses 具有较小尺寸（约 650 nm）的卵形病毒粒子和 650 kb 的基因组（图 2）；它们与潘多拉病毒有 16% 的基因相同，但三分之二的基因是 ORFans。衣壳似乎被不同长度的原纤维所包围，并且它们呈现出类似于潘多拉病毒的膜内衬外皮。
它们的感染周期也与潘多拉病毒相似，不同之处在于 DNA 似乎被预先包装在细丝中，这些细丝在被加载到成熟的病毒粒子中之前在病毒工厂中积累。通过低温电子显微镜 (cryo-EM)广泛分析了病毒颗粒组装中涉及的膜重塑。&lt;/p&gt;
&lt;p&gt;美杜莎病毒Medusaviruses也是棘阿米巴感染病毒。它们的二十面体病毒粒子直径为 260 nm，被从每个衣壳延伸出的球形头尖刺覆盖，并具有包围衣壳内部的脂质膜。通过冷冻电镜确定了低分辨率结构，其返回的 T 值为 277。美杜莎病毒病毒粒子从宿主中进入和离开的机制尚未确定。摄入宿主细胞质后，其 DNA 在宿主细胞核中复制，病毒粒子在细胞质中组装（图 2）。&lt;/p&gt;
&lt;h3 id=&#34;仅具有胞质感染周期的病毒&#34;&gt;仅具有胞质感染周期的病毒&lt;/h3&gt;
&lt;p&gt;继 PBCV1 之后，研究最多的第二个病毒是感染阿米巴原虫的拟菌病毒mimivirus。约 700 nm 的病毒体由直径约 500 nm 的二十面体衣壳组成，基因组为 1.2 Mb。细菌型糖由病毒编码的糖基化机制合成，是装饰衣壳周围拟病毒原纤维的复杂 70 kDa 和 25 kDa 多糖结构的组成部分。拟菌病毒衣壳的低分辨率结构已被确定（图2），详细的原子力显微镜提供了对病毒粒子组成的更多见解，进一步强调了衣壳的复杂性。&lt;strong&gt;有两层内部脂质膜，一层位于衣壳内，另一层位于核仁区室中，其中包含基因组和数百种蛋白质，包括 RNA 聚合酶和转录成熟机器&lt;/strong&gt;。有人提出，类核中的非结构蛋白是启动病毒感染周期、保护病毒体免受氧化应激和进行早期转录所必需的。初步数据表明，基因组组织在直径为 30 nm 的螺旋核衣壳中，其中包含 GMC 氧化还原酶，该酶也构成衣壳的糖基化原纤维。折叠的基因组排列在核衣壳的外壳上，留下一个可以容纳大蛋白质（包括 RNA 聚合酶）的中央通道。拟菌病毒通过其糖基化原纤维粘附在宿主细胞膜上后触发吞噬作用进入宿主。一旦进入液泡，二十面体一个顶点的特定结构（星门）就会打开，衣壳下的膜被拉出并与液泡膜融合，从而允许类核转移到宿主细胞质中。与拟菌病毒科的其他已知成员类似，拟菌病毒在其宿主的细胞质中复制（图2）。早期转录开始使用病毒编码的转录机制，该机制最初仍局限于类核中。由于活跃的转录和复制而积累的核酸导致病毒工厂的大小增加，新合成的病毒颗粒开始在其外围出芽，回收来自内质网或高尔基体的宿主细胞膜。在将基因组加载到类核中之后，病毒颗粒成熟的最后一步是将原纤维层添加到衣壳中，细胞裂解后释放出数百个新合成的病毒颗粒。&lt;/p&gt;
&lt;p&gt;与拟菌病毒相关的几种病毒具有相似的感染周期，但病毒体较小。其中包括 Cafeteria roenbergensis 病毒，它具有直径 300 nm 的二十面体衣壳（图 2），衣壳下面有一层脂质膜。其感染模式尚不完全清楚，但与拟菌病毒类似，已观察到细胞质中的核仁结构和细胞外空衣壳，支持衣壳的外部开口，然后内膜与细胞膜融合，从而允许将类核转移到宿主细胞质中。病毒粒子含有约 150 种蛋白质，它们要么构成二十面体衣壳，要么是启动感染周期所必需的。新生病毒体在感染后期聚集并通过细胞裂解释放。通过冷冻电镜测定的复杂衣壳结构对应于 T 数 499，并为衣壳组装提供了新模型。&lt;/p&gt;
&lt;p&gt;拟菌病毒科的另一个成员是博多萨尔坦病毒Bodo saltans virus，它具有类似的二十面体衣壳，直径为 300 纳米。它的衣壳似乎由两层蛋白质层组成，周围环绕着 40 纳米长的原纤维。衣壳的一个顶点存在可能的星门状结构，并且有两层膜，一层位于外部蛋白质壳内，另一层位于包含基因组的核样区室内部。感染周期与拟菌病毒相似，只是宿主的核基因组似乎被降解了。病毒工厂在细胞后极发育，填充了三分之二的细胞空间，将细胞核和细胞器推到一边。脂质囊泡被招募用于病毒粒子组装，该组装发生在病毒工厂的一侧，成熟的病毒粒子在基因组加载后分离并迁移到细胞的后极。细胞裂解后，病毒粒子通过在宿主膜上的囊泡中出芽而释放（图2）。&lt;/p&gt;
&lt;p&gt;感染藻类的一些最大的病毒属于拟病毒科，所有这些病毒都具有二十面体衣壳，尺寸范围从无噬金球菌病毒的 150 nm（图 2）到最近描述的 Prymnesium kappa 病毒的 370 nm。 这些病毒还在宿主细胞质中构建病毒工厂，但尚不清楚转录机制是否被加载到衣壳中，从而实现完全细胞质的感染循环。&lt;/p&gt;
&lt;p&gt;在核质病毒门中发现的最大的病毒体是 Pithovirus 和 cedratvirus 的病毒体（图 2），它们具有非常大的双耳瓶形衣壳，长度可达 2 µm，宽度可达 600 nm，包裹基因组高达 685kb（表1）。衣壳由软木塞结构（Corks）封闭——Pithovirus有一个（图 2）， cedratvirus两个——这些软木塞结构是由组织成蜂窝状阵列的蛋白质制成的。尽管病毒体形态与潘多拉病毒非常相似，但外皮不同，似乎由平行条带组成，没有纤维素；衣壳似乎覆盖有短而稀疏的原纤维。与其他变形虫感染病毒一样，感染周期通过吞噬作用进行，然后衣壳打开并与吞噬体进行膜融合。对于pithovirus和cedratvirus，病毒粒子中装载的RNA聚合酶在细胞质中开始早期转录，并且宿主细胞核在整个感染周期中保持完整。在成熟过程中，外皮和木塞的储存库在宿主细胞质中积累，并用于构建新的双耳瓶形状的病毒体。然后，新生病毒体通过胞吐作用或细胞裂解离开宿主细胞。&lt;/p&gt;
&lt;p&gt;除了拟菌病毒科之外，还有一些较小的阿米巴感染病毒，例如马赛病毒科的成员，其具有直径约 250 纳米的二十面体病毒体（图 2）。最近研究以不同的分辨率显示了该家族两个成员的衣壳结构，揭示了 T 数 309 和复杂的衣壳结构以及许多次要衣壳蛋白。
墨尔本病毒Melbournevirus和马赛病毒科Marseilleviridae的其他成员被吞噬作用吞噬，然后在液泡膜消失后失去二十面体外观，变成球形。
与 Megamimivirinae 类似，它们的基因组保留在细胞质中；然而，RNA 聚合酶并未加载到病毒粒子中。相反，核蛋白被招募到早期病毒工厂，包括执行早期转录的宿主 RNA 聚合酶。细胞核的外观在感染早期发生变化，并通过病毒感染引发的仍未知的机制而发生渗漏。感染 1 小时后，细胞核完整性恢复，病毒编码的 RNA 聚合酶执行中间和晚期转录，二十面体颗粒在病毒工厂内组装（图 2A）。
马赛病毒科病毒编码组蛋白双联体，形成核小体，将基因组包装成病毒体。成熟的衣壳可以聚集在大囊泡中，细胞裂解导致单个病毒体和充满液泡的释放。
正如这些例子所表明的那样，巨型病毒的结构及其感染机制并没有共同的蓝图；这些特征在巨型病毒谱系之间有所不同，并且可能是由宿主生物体决定的。实验表征的巨型病毒的宿主范围仅限于少数变形虫和藻类谱系，仅代表真核生物多样性的一小部分。因此，预计当新病毒与其天然宿主一起被捕获时，将会揭示更多不寻常的病毒颗粒和感染策略。&lt;/p&gt;
&lt;h2 id=&#34;不依赖培养的基因组学&#34;&gt;不依赖培养的基因组学&lt;/h2&gt;
&lt;h3 id=&#34;序列推断的巨型病毒的流行率和多样性&#34;&gt;序列推断的巨型病毒的流行率和多样性&lt;/h3&gt;
&lt;p&gt;通过巨病毒的分离和培养，在巨病毒生物学和多样性方面取得了许多重要发现。然而，此类方法受到满足实验室环境中最佳生长要求的限制，并且通常仅限于裂解病毒。事实证明，不依赖培养的方法是从环境样本中发现巨型病毒基因组成的不可或缺的工具。&lt;/p&gt;
&lt;p&gt;在宏基因组学的早期，基于单标记基因的调查显示，藻类DNA病毒科和拟病毒科的几种病毒存在于塔拉海洋和马尾藻海探险期间收集的各种海洋宏基因组中，并且这些病毒的光层比真核生物更丰富。在后续研究中，这些调查的数据提出了这样的假设：海洋中的巨型病毒比任何细胞生物体都更加多样化。随后，对 NCLDV 主要衣壳蛋白 (MCP) 的大规模分析（其中在地球生物群落中发现了 50,000 多种此类蛋白质）揭示了巨型病毒的全球传播，包括在陆地生态系统中。&lt;/p&gt;
&lt;p&gt;能够发现新型 NCLDV 的其他方法包括单病毒或单细胞基因组学和微型宏基因组学。首先，从海洋样本中分选病毒颗粒，能够检测到先前发现与藻类 Ostreococcus spp 有关的病毒。和球形棕囊藻。这种方法对几个所谓的巨型病毒单扩增基因组进行了测序，其中最大的是属于拟病毒科的 813 kb 基因组，编码元半胱天冬酶，该酶可能使宿主细胞自催化细胞死亡。单细胞方法，包括单个真核细胞的分选和基因组扩增，也被用来鉴定与海洋领鞭毛虫相关的五种巨型病毒并进行基因组测序；与所有其他 NCLDV 基因组的比较基因组学表明，以相似的营养模式（包括宿主栖息地和生活方式）感染宿主的病毒表现出不同的遗传特征。此外，对单个森林土壤样本的小型宏基因组学分析（方框 1）导致富集和发现了 15 种不同的巨型病毒宏基因组组装基因组 (MAG)，其中包括 Klosneuvirinae 的几个成员，这突显了巨型病毒在土壤尚未开发的多样性。&lt;/p&gt;
&lt;p&gt;从环境序列数据中获取 NCLDV 基因组的最成功方法是基因组解析宏基因组学。自 2000 年代初以来，这种方法已成为从复杂环境样本中恢复细菌和古细菌基因组的常见做法，但又过了近十年，第一个巨型病毒 MAG (GVMAG) 才出现在公共数据库中（图 1）。尤等人重建了第一个 GVMAG，作为他们对南极洲有机湖宏基因组中的病毒噬菌体进行研究的副产品。
几年后，从美国黄石国家公园黄石湖的环境序列数据中检索到了另外四个可能与藻类相关的 GVMAG；人们发现它们与藻DNA病毒科和拟病毒科病毒科有关，并与同一样本中共存的噬病毒体共享一些基因。
当从宏基因组数据中恢复出拟南芥病毒科亚科（即 Klosneuvirinae）的成员时，用于发现巨型病毒基因组中心序列信息的独立于培养的方法获得了关注。事实上，这些病毒是在来自四个不同大陆的淡水和污水样本的宏基因组中发现的，这一事实表明，这一新的巨型病毒群是世界性的。
随后在深海中发现了 20 多个 GVMAG，其中 15 个属于 Pithoviridae，这表明类 Pithovirus 病毒在海洋中的流行率惊人地高，随后在收集的样本中发现了其他可能与藻类相关来自中国上海滴水湖的淡水巨型病毒。当从不同生物群落收集的数千个样本分析生成的宏基因组数据集中提取了 2,000 多个 GVMAG 时，独立于培养的病毒基因组学和发现方法的独特优势变得最为明显。
此后不久，又重建了主要来自海洋系统的另外 500 个 GVMAG。将 GVMAG 添加到 Nucleocytoviricota 物种树中导致系统发育多样性增加十倍以上，并实现了 Nucleocytoviricota 分类框架的全面更新，其中 Mesomimiviridae 占观察到的三分之一以上多样性（图 3）。新谱系的添加还导致核病毒泛基因组的大小大幅增加，该基因组现在包含超过 900,000 个蛋白质。这转化为广泛扩展的功能基因库，不仅为巨型病毒如何与其宿主和环境相互作用提供了许多新的见解，而且还产生了关于其进化作用的令人信服的新假设。&lt;/p&gt;
&lt;img src=&#34;images/gv3.png&#34; title=&#34;&#34;/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;图 3：通过宏基因组学扩展 Nucleocytoviricota 系统发育多样性。&lt;/strong&gt; 显示了核质病毒的两个物种树：内部树说明了基于病毒分离株基因组的核质病毒多样性，外部倒转树突出了通过源自培养独立测序方法的基因组扩展物种多样性（黑色分支）。病毒分离株的分支根据分类群的隶属关系进行着色，并推断出外树的扩展多样性。彩色条带显示目级分类，彩色圆圈表示所选巨型病毒的系统发育位置，这些将在文本中进一步讨论。树根为痘病毒科。物种树改编自核质病毒谱系的分类框架。 AaV, Aureococcus anophagefferens virus; CroV, Cafeteria roenbergensis virus; PBCV1, Paramecium bursaria chlorella virus 1。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;探索巨型病毒的宿主&#34;&gt;探索巨型病毒的宿主&lt;/h3&gt;
&lt;p&gt;基因组解析的宏基因组学能够发现数千个病毒基因组，其中许多代表与通过分离或共培养恢复的病毒不同的谱系（图3）。然而，从宏基因组中回收的巨型病毒通常缺乏宿主生物体的信息。克服这一限制的方法是检测同一样本中同时存在的病毒和潜在的真核宿主。此外，病毒及其宿主之间遗传物质的水平转移是一种常见现象，并且可以双向进行，并且对可能通过最近的水平基因转移（HGT）获得的病毒基因进行分析可能会识别宿主生物体。在巨型病毒宏基因组学的早期，基于读段图谱的共现分析显示，一些海洋样本中病毒序列的存在与真核卵菌的序列呈正相关，但尚未发现NCLDV与真核卵菌的序列存在相关性。
在另一项研究中，宏转录组数据的共表达分析揭示了无噬金球菌病毒Aureococcus anophagefferens virus与其藻类宿主之间的紧密联系，并且还表明同一样本中存在的其他拟病毒科可能与金球菌属相关。这种方法还将藻藻DNA病毒科和拟病毒科成员与多种海洋微真核生物联系起来，包括领鞭毛虫、原生藻菌、硅藻、甲藻和尾虫。&lt;/p&gt;
&lt;p&gt;在另一项研究中，通过病毒和真核 PolB 编码基因以及真核 18S rRNA 基因高变 V9 区域的共现分析暗示了病毒与宿主的关系。然后将该方法应用于塔拉海洋探险期间收集的一套全面的海洋宏基因组，揭示了属于 Alveolata、Opisthokonta、Rhizaria 和 Stramenopiles 的特定微真核生物与不同的 NCLDV 谱系共存。在一项类似的研究中，在拟病毒科病毒和作为其潜在宿主的海洋金藻植物之间检测到强烈的共现信号。随后对 GVMAG 与金藻基因组和转录组之间假定的 HGT 事件的检测为这种宿主-病毒关系提供了进一步的支持。对 2,000 多个 NCLDV 基因组中存在的 HGT 候选基因（其中大部分是来自全球不同采样点的 MAG）进行的系统分析揭示了数千个可能通过最近的 HGT 引入宿主染色体或源自宿主的基因。基于这些结果，有可能提出 NCLDV 与所有主要真核生物门成员之间的联系。尽管大多数这些预测的宿主尚未被发现被巨型病毒感染，但通过最近的 HGT 事件成功预测了 20 多个先前分离的病毒与宿主关系，强调了这种基于序列推断的宏基因组组装病毒方法的有效性基因组（图 4）。&lt;/p&gt;
&lt;img src=&#34;images/gv4.png&#34; title=&#34;&#34; width=&#34;50%&#34;/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;图 4：经过实验验证和计算预测的核细胞病毒宿主范围。&lt;/strong&gt; 显示了通过与天然宿主分离、共培养、单细胞分选和基于计算机水平基因转移的预测而鉴定的宿主谱系。彩色框的黑色轮廓表明经过实验验证的相互作用也已通过计算预测。叶绿体包括链藻门（该组包括一些绿藻）和绿藻门（该组包括大多数绿藻）。 CroV 亚科，拟病毒科中的病毒亚科水平进化枝，包含 Cafeteria roenbergensis 病毒； HaV 科，藻类病毒目中的科级进化枝，含有赤潮异形病毒； TSAR，Telonemia-Stramenopiles-Alveolata-Rhizaria 超群。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;尽管基于序列的计算宿主预测提供了一种扩大假定 NCLDV 宿主范围的方法，但这些方法存在一些潜在的挑战和偏差。例如，共现分析依赖于足够的宿主基因组覆盖率来检测宏基因组数据，而 HGT 分析需要宿主基因组序列的可用性。此外，很难从以前的宿主中检测出古老的 HGT。 NCLDV 基因整合到宿主基因组中的分析的另一个限制是所用数据库的质量。例如，GVMAG 在公共数据库中被发现被错误注释为细菌、古细菌或真核生物，这阻碍了使用自动化工具进行正确的 HGT 检测。尽管存在一些局限性，扩大宏基因组衍生的 NCLDV 的假定宿主范围为假定宿主的靶向采样、病毒与宿主共同进化的研究以及确定病毒编码功能以靶向调节宿主代谢提供了基础。然后可以推断病毒及其宿主的基于序列的推论，以评估这种相互作用对全球生态系统的影响。&lt;/p&gt;
&lt;h2 id=&#34;从-hgt-到内生化&#34;&gt;从 HGT 到内生化&lt;/h2&gt;
&lt;p&gt;病毒与其宿主之间的 HGT 是一种常见现象，一些巨型病毒甚至可以将其整个基因组整合到宿主染色体中（图 4）。这种所谓的内生化是大多数真核病毒观察到的一种机制。 NCLDV 基因阵列偶尔会在真核生物基因组中发现，特别是在藻类、植物和变形虫中。
最近对已发表的真核生物基因组和转录组的一项调查显示，66 种不同的真核生物中存在巨型病毒基因，包括几种棘阿米巴物种、鞭毛虫、纤毛虫、原生藻菌、卵菌、真菌、节肢动物和各种单细胞和多细胞藻类（图 4）。
然而，对于许多真核生物来说，尚未观察到巨型病毒感染。&lt;/p&gt;
&lt;p&gt;NCLDV 基因的整合通常表现为高度宿主特异性，在一种真核物种中检测到的病毒基因与在密切相关物种中发现的病毒基因无关。在整合的基因中，有 NCLDV 标志基因，这些基因在某些情况下分散在整个宿主染色体上，而在其他情况下，共同定位在由 100 多个基因组成的岛屿中。拟病毒科的一些成员的完整病毒基因组的整合已被描述；例如，20 多年前，Ectocarpus siliculosus 病毒很可能通过使用整合酶整合到其褐藻宿主中。
相关的球形棕囊藻病毒是一种溶原性病毒，可引起持续感染，这与许多其他已知的NCLDV谱系形成鲜明对比，这些谱系是基于裂解阿米巴宿主而成功分离的。对现有藻类基因组和转录组数据的分析揭示了整个巨型病毒基因组整合到真核宿主染色体中的其他例子。一些区域编码超过 1,500 个病毒基因，占绿藻宿主基因的 10%。一些检测到的病毒基因被注释为在碳水化合物代谢、染色质重塑、信号转导、能量产生和翻译中发挥作用的酶。&lt;/p&gt;
&lt;p&gt;目前尚不清楚整合的巨型病毒是否处于休眠状态，对宿主没有任何好处或只有很少的好处，或者宿主细胞是否受益于某些可能提供或微调代谢能力的病毒基因。另一个悬而未决的问题是，整合病毒基因组中是否存在编码机制，可以在转录和翻译一些整合病毒基因后重新激活感染。随后，在宿主复制过程中释放巨型病毒遗传物质并有效传播到新宿主。如果病毒感染没有重新激活，巨型病毒基因会随着时间的推移而衰减，导致重排和假基因化，并使它们的检测变得更具挑战性或不可能。巨型病毒内生化主要是通过分析真核分离基因组发现的，但研究者预计真核生物基因组解析的宏基因组学将进一步促进发现这种现象的许多其他例子。未来对巨型病毒基因整合的研究有望为内生化如何塑造并继续塑造真核生物的进化和生态学提供一些答案。&lt;/p&gt;
&lt;h2 id=&#34;宿主的重编程及其对宿主群体的影响&#34;&gt;宿主的重编程及其对宿主群体的影响&lt;/h2&gt;
&lt;p&gt;感染后，病毒会对其宿主细胞进行重新编程，并将其转变为支持病毒复制的所谓病毒细胞。与感染细菌的病毒（包括大型病毒）噬菌体类似，巨型病毒似乎向宿主贡献基因，以增强和/或调节宿主细胞的代谢能力（图5）。&lt;/p&gt;
&lt;p&gt;第一个描述的例子是病毒编码的乙酰透明质酸合酶，由小球藻病毒编码，使其藻类宿主能够合成乙酰透明质酸。此外，还发现小球藻病毒编码的活性钾通道在感染过程中整合到宿主膜中。另一个例子是金牛座球菌病毒中源自宿主的氮转运蛋白，它在绿藻宿主感染期间表达。实验表征提供的证据表明，这种转运蛋白可能会增加宿主细胞对氮的吸收。其他研究揭示了 Tetraselmis 病毒基因组中发酵基因的存在，可能对营养有限的海洋系统中宿主的代谢产生影响。对巨型病毒分离株和 MAG 的调查揭示了细胞色素 P450 单加氧酶基因的广泛存在，可能促进或调节复杂的代谢过程，例如甾醇和其他脂肪酸的合成。对霍科病毒独特的细胞色素 P450 进行的宏基因组实验表征并未揭示重组病毒细胞色素 P450 代谢的任何甾醇。&lt;/p&gt;
&lt;p&gt;最近研究在 NCLDV 基因组中发现了真核肌动蛋白（“viractins”）和肌球蛋白（“virmyosins”）的远距离同源物，表明这些病毒影响细胞结构、运动性和细胞内运输过程；然而，还需要进一步的功能验证。此外，一种与 Mesomimiviridae 相关的巨型病毒感染异养领鞭毛虫，被发现编码 1 型视紫质以及合成所需色素 β-胡萝卜素的途径。 NCLDV 视紫红质的宏基因组实验表征表明，假定的视紫红质可能起到质子泵的作用，从光中产生能量。在南极洲有机湖的 GVMAG 中发现了一种系统发育独特的 NCLDV 视紫红质，该蛋白质的实验表征表明，它可能充当光门控五聚离子通道，可能影响宿主细胞的离子稳态和趋光性。&lt;/p&gt;
&lt;p&gt;此外，通过全局宏基因组学，预测编码各种底物运输过程、通过光产生能量（视紫红质和参与光合作用的基因）、碳固定和糖酵解的基因常见于隶属于核质病毒不同谱系的GVMAG（图5)。更详细的系统发育分析表明，一些编码铁、磷酸盐、镁和铵转运蛋白的辅助代谢基因起源于真核宿主，并且可能最近通过 HGT被巨型病毒获得。然而，编码几种视紫红质、琥珀酸氢化酶、乌头酸酶和甘油醛3-磷酸脱氢酶的其他基因显示出一种模式，表明祖先宿主之一具有病毒起源或共同进化起源。总而言之，代谢基因在不同的 NCLDV 谱系中广泛存在，这意味着增强宿主代谢能力可能是 NCLDV 比最初假设更常用的策略。然而，目前缺乏大多数这些基因和途径的功能和活性及其对宿主细胞的影响的实验证据，需要进一步的实验研究。&lt;/p&gt;
&lt;p&gt;代谢重编程对宿主种群结构和动态有直接影响。一个引人注目的例子是世界性的海洋石藻，它形成大量的水华，在全球碳和硫循环中发挥着关键作用。Emiliania huxleyi种群受到球石病毒Emiliania huxleyi viru的持续性但最终裂解性感染。一旦诱导溶解，就会导致藻华终止，大量方解石和营养物质沉积到海洋中，从而增加海洋溶解有机物池。重要的是，病毒感染不仅会导致宿主裂解，还会通过重新连接宿主生理机能，特别是糖的周转以及脂肪酸和脂质的合成来促进病毒复制。人们对宿主群体如何受到通过基因组解析宏基因组学恢复的巨型病毒的影响知之甚少，但考虑到这些病毒的预测宿主，可以想象，类似的原理无处不在，并且正在积极塑造生物群落和生物地球化学循环。&lt;/p&gt;
&lt;img src=&#34;images/gv5.png&#34; title=&#34;&#34;/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;图 5：巨病毒衍生病毒细胞的预测代谢重编程以及巨病毒感染对宿主群体的后果。&lt;/strong&gt; 一个假设的病毒细胞模型展示了不同巨型病毒在感染宿主过程中可能具备的代谢功能，这些功能基于巨型病毒基因组中辅助代谢基因的存在。更深的红色阴影表示某些功能已通过实验数据得到支持，例如：由Paramecium bursaria chlorella virus 1（PBCV1）编码的钾通道、由Ostreococcus tauri病毒编码的铵转运蛋白、由Choanovirus编码的光驱动质子泵以及从南极Organic Lake Phycodnavirus（OLPV）的宏基因组组装基因组中发现的光门控离子通道。此外，还特别指出Tetraselmis病毒编码的发酵基因。TCA表示三羧酸循环。  a. 尚未在天然病毒宿主系统中进行实验验证。 b. 目前没有这些基因功能的实验证据。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;巨型病毒基因组编码细胞生命的标志基因&#34;&gt;巨型病毒基因组编码细胞生命的标志基因&lt;/h2&gt;
&lt;p&gt;在巨型病毒基因组中发现的最有趣的特征之一是细胞生命的标志基因，例如 &lt;strong&gt;tRNA 和参与蛋白质生物合成的基因&lt;/strong&gt;。这种现象首先是在对拟菌病毒基因组进行测序时描述的。随后的分析揭示了病毒编码的细胞基因在细菌和真核生物之间的系统发育位置，表明其起源很古老。在其他巨型病毒基因组中发现了具有类似深分支模式的其他细胞标志基因，并导致了这样的假设：巨型病毒可能代表生命的第四个域，或者是由还原进化衍生的高度退化的真核细胞的残余物。随后使用更复杂的系统发育模型表明，其中许多基因很可能是从不同的真核宿主获得的。其中一些基因可能代表来自未被发现的真核宿主的古代转移。这一发现为巨型病毒可能是由较小病毒进化而来的假设提供了证据。&lt;/p&gt;
&lt;p&gt;然而，其他研究报告了细胞生物体的一些管家基因和其他代谢基因的替代拓扑，包括视紫红质和细胞色素 P450。还有人提出，这些基因可能从祖先巨型病毒转移到过去的真核宿主，甚至原真核生物，这凸显了巨型病毒在真核细胞进化中潜在的不可或缺的作用。此外，一些可能作为真核核心代谢一部分的基因可能是在巨型病毒遗传物质整合到古代真核细胞基因组中时引入的，进一步塑造了真核进化。在新发现的巨型病毒基因组中，已多次记录到氨酰 tRNA 合成酶 (aaRS) 和真核翻译因子基因的存在。&lt;/p&gt;
&lt;p&gt;事实上，从宏基因组数据中已经报道了克洛斯新病毒中几乎完整的 20 个 aaRS 集。不久之后，分离出两种图潘病毒tupanviruses，其基因组含有全套 aaRS 和 tRNA7，随后描述了第一个克洛斯新病毒亚科分离株，其中一个也含有全套 aaRS145。特别是在克洛斯新病毒亚科中，具有谱系特异性进化历史的 aaRS 的存在为这些基因源自不同的真核宿主提供了额外的支持。目前，完整aaRS基因组的存在仅限于拟病毒科成员，并且有关巨型病毒aaRS在宿主相互作用中的作用的信息有限；然而，有些已经过实验研究并且确实具有功能。甚至有一些实验证据表明，这些基因在使巨型病毒减少对宿主机器的依赖方面具有潜在作用，例如，在响应病毒感染或其他不利条件而关闭宿主翻译期间。另一方面，通过提供额外的aaRS拷贝以支持宿主翻译来增强病毒翻译的可疑作用尚未得到证实。细胞生命的其他标志基因包括编码四种核心组蛋白的基因以及预计参与能量产生的巨型病毒基因。最近的一项研究报道了马西潘多拉病毒病毒粒子的活跃膜电位以及三羧酸循环基因的几个远程同源物的表达。尽管编码功能最近被认为只存在于细胞生物体中，但&lt;strong&gt;目前没有证据表明巨型病毒在没有宿主来源的核糖体或不依赖于宿主的能量产生的情况下进行蛋白质翻译&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;近 20 年的巨型病毒分离已经产生了代表高度多样化谱系的病毒分离株。对这些病毒生物学的补充详细研究揭示了病毒体结构和感染策略的许多重要细节。很明显，病毒粒子的大小和结构存在明显差异，尽管这些病毒进入和退出宿主细胞的方式有一些相似之处，但大多数巨型病毒采用不同的策略在宿主细胞内复制和利用宿主细胞。病毒分离株的测序发现了已知最大和最小的核质病毒基因组。&lt;/p&gt;
&lt;p&gt;独立于培养的方法加速了核质病毒门中新巨型病毒和其他大型病毒基因组序列的发现，为它们的系统发育多样性和功能潜力提供了新的见解。宏基因组学还表明，这些病毒几乎可以在地球上的任何地方找到，与不同的真核生物有关，并且可能通过代谢重编程改变宿主的生理机能，最终改变环境中宿主群落的结构和功能。与此同时，基于宏基因组数据集中 NCLDV 标志基因的估计表明，迄今为止仅发现了巨型病毒基因组的一小部分，并且巨型病毒的多样性可能远远大于细菌，至少在海洋中。将巨型病毒掺入环境样本中的受控宏基因组分箱实验表明，给定样本中存在的许多巨型病毒的基因组片段可能仍低于检测限，这凸显了超深度宏基因组测序或有针对性的分离工作的必要性。此外，人们对检测与已知病毒相似的巨型病毒存在强烈偏见，因为用于从宏基因组中识别病毒的工具严重依赖于在测序的 NCLDV 基因组中观察到的特征，例如大量保守基因。然而，巨型病毒基因组表现出广泛的可塑性，使得同一进化枝内的病毒迅速分化，并且共享的基因很少。&lt;/p&gt;
&lt;p&gt;最近 NCLDV 多样性的一个令人震惊的例子是 yaravirus，它是与其本地阿米巴宿主分离的，但在公共宏基因组数据集中没有检测到密切相关的序列。由于其 90% 以上的基因与公共数据库中的基因缺乏相似性，并且缺乏大多数病毒标志基因，因此将其在 NCLDV 中的定位很困难，并且其在核质病毒中的定位目前仍在争论中。此外，最近的一份预印本描述了基于基因组解析的宏基因组发现了来自海洋系统的 Proculviricetes 和 Mirusviricetes，这可能是 Nucleocytoviricota 中两个类水平的新谱系，缺乏大多数典型的病毒标志基因。总而言之，通过培养和非培养方法观察到的核质病毒中病毒的过度基因新颖性，进一步强调了许多巨型病毒可能隐藏在人们的视线中。&lt;/p&gt;
&lt;h2 id=&#34;其他概念&#34;&gt;其他概念&lt;/h2&gt;
&lt;p&gt;巨型病毒之所以被称为“巨型”，是因为它们违反了“可过滤性”的特性，自 1892 年分离出烟草花叶病病毒以来，“可过滤性”一直被用来将病毒与其他微生物分开。当今已知的巨型病毒（尚待其他病毒）很可能被忽视，因为人们过早地认为所有病毒都足够小，可以通过标准的消毒过滤器。与这一信念相一致的是，第一个巨型病毒（称为拟菌病毒，拟菌病毒科的原型）的病毒性质在十多年来一直被误认为是寄生细菌之后，直到 2003 年才被人们认识。因此，&lt;strong&gt;根据病毒颗粒（病毒颗粒）的大小（最小尺寸&amp;gt;250 nm），病毒被归类为“巨型”病毒&lt;/strong&gt;，这使得它们可以通过标准光学显微镜看到。尽管巨型病毒的颗粒大小和基因组大小之间没有严格的相关性，&lt;strong&gt;但大于 400kb 的基因组有时被用作定义巨型病毒的替代阈值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;病毒工厂：病毒在受感染宿主细胞的细胞质中发育的瞬时细胞器，巨型病毒在其中进行复制和组装。&lt;/p&gt;
&lt;p&gt;T数：三角剖分 (triangulation，T) 数描述了二十面体每个面的结构单元数，并计算为两个相邻五重顶点之间距离的平方。&lt;/p&gt;
&lt;p&gt;软木塞结构：一些病毒体的独特结构；就 Pithovirus 而言，软木塞位于病毒颗粒的顶端，由排列成六角形蜂窝状阵列、间隔 15 nm 的条纹组成。&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Schulz, F., Abergel, C. &amp;amp; Woyke, T. Giant virus biology and diversity in the era of genome-resolved metagenomics. Nat Rev Microbiol 20, 721–736 (2022). &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1038/s41579-022-00754-5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doi.org/10.1038/s41579-022-00754-5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Abergel, Chantal et al. Giant viruses. Current Biology, Volume 30, Issue 19, R1108 - R1110&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.americanscientist.org/article/giant-viruses&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.americanscientist.org/article/giant-viruses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Frederik Schulz et al. ,Giant viruses with an expanded complement of translation system components.Science356,82-85(2017).DOI:10.1126/science.aal4657&lt;/li&gt;
&lt;li&gt;Menon T. Athira, Swapna P. Antony, The Tiny Giants: Overview of Giant Viruses, Ecological Genetics and Genomics, Volume 29, 2023, &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1016/j.egg.2023.100210&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doi.org/10.1016/j.egg.2023.100210&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>近期的一些环境病毒组研究（2024.10）</title>
        <link>https://jb-cao.github.io/Cao-blog/p/env-virus/</link>
        <pubDate>Thu, 07 Nov 2024 00:00:00 +0000</pubDate>
        
        <guid>https://jb-cao.github.io/Cao-blog/p/env-virus/</guid>
        <description>&lt;h2 id=&#34;极地环境病毒组&#34;&gt;极地环境病毒组&lt;/h2&gt;
&lt;p&gt;文献：Rahlff, J., Westmeijer, G., Weissenbach, J. et al. Surface microlayer-mediated virome dissemination in the Central Arctic. Microbiome 12, 218 (2024). &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1186/s40168-024-01902-0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doi.org/10.1186/s40168-024-01902-0&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;摘要&#34;&gt;摘要&lt;/h3&gt;
&lt;p&gt;背景：
水生病毒在塑造微生物群落中起着关键作用。在极地环境中，病毒面临着诸多挑战，如宿主资源有限和环境条件恶劣。然而，由于这些生态系统的访问受限，作者对病毒的多样性、丰度、适应性及宿主相互作用的了解仍然有限。&lt;/p&gt;
&lt;p&gt;结果：
为弥补这一知识空白，研究者研究了来自中央北极和格林兰北部大气近水生生态系统的病毒。病毒-宿主分析的水样采集自约60厘米深度和亚毫米表面微层（SML），样本采集是在极地夏季的2021年“同步极地调查”（Synoptic Arctic Survey）期间进行的，地点为破冰船Oden。水样来自融水池和开阔水域，经过大小分级过滤后，进行了基因组解析的宏基因组学和培养研究。融水池中的原核生物多样性显著低于开阔水域。
融水池的主要微生物为黄杆菌属（Flavobacterium sp.）和Aquiluna属（后者基因组较小，仅为1.2 Mb，并具有通过磷酸乙酰转移酶-乙酸激酶途径生成ATP的代谢潜力）。融水池的病毒多样性在宿主部分（0.2–5 µm）上明显低于开阔水域。在1154个病毒操作分类单元（vOTUs）中，约三分之二被预测为噬菌体，其中17.2%编码有辅助代谢基因（AMGs），这些基因具有代谢功能。一些AMGs如甘油-3-磷酸胞苷转移酶和冰结合蛋白可能为宿主提供抗冻保护。前噬菌体常与SML基因组相关，且从北极SML菌株Leeuwenhoekiella aequorea Arc30中诱导了两个活跃的前噬菌体。
研究者还发现，与约60厘米深度相比，SML中的vOTU丰度与该vOTU在五个不同北极站点的分布呈更强的正相关。&lt;/p&gt;
&lt;p&gt;结论：
研究结果表明，病毒采用复杂的策略以适应极端、宿主有限的环境。此外，研究者的观察结果表明，海气界面是中央北极病毒分布的重要平台。&lt;/p&gt;
&lt;h3 id=&#34;关键结果&#34;&gt;关键结果&lt;/h3&gt;
&lt;h4&gt;&lt;/h4&gt;
&lt;h2 id=&#34;格陵兰冰原巨型病毒&#34;&gt;格陵兰冰原巨型病毒&lt;/h2&gt;
&lt;h3 id=&#34;摘要-1&#34;&gt;摘要&lt;/h3&gt;
&lt;p&gt;背景：
冰川和冰原上的深色雪和冰川冰藻有助于加速融化。对这些藻类的生物控制，特别是病毒的作用，仍然知之甚少。巨型病毒属于核质大 DNA 病毒 (NCLDV) 超群（核细胞病毒门），种类繁多，分布于全球。众所周知，NCLDV 会感染海洋和淡水环境中的真核细胞，从而对这些生态系统中的藻类种群提供生物控制。然而，关于陆地冰冷栖息地 NCLDV 的多样性和生态系统功能的信息非常有限。&lt;/p&gt;
&lt;p&gt;结果：
在这项研究中，作者首次研究了巨型病毒及其在冰雪栖息地中的宿主联系，例如冰石、黑冰、冰芯、红雪和绿雪，以及五种人工培养的绿藻雪藻的基因组组装。几乎所有样本中都存在巨型病毒标记基因；从红雪和雪藻基因组组合中回收的丰度最高，其次是绿雪和深色冰。这些含有 NCLDV 标记基因的 GrIS 栖息地中的各种活跃藻类和原生生物表明，感染可能发生在一系列真核宿主上。来自红色和绿色雪的宏基因组数据包含来自Imitervirales、Asfuvirales和Algavirales目的巨型病毒宏基因组组装基因组的证据。&lt;/p&gt;
&lt;p&gt;结论：
作者的研究强调了格陵兰冰盖冰雪样本中 NCLDV 家族的特征。在红雪样本中发现巨型病毒宏基因组组装基因组（GVMAG），并首次在雪藻培养基因组组装中鉴定出相关NCLDV标记基因；暗示 NCLDV 和雪藻之间存在关系。宏转录组病毒基因也与宏基因组序列对齐，表明 NCLDV 是微生物群落的活跃组成部分，并且是真核藻类和原生生物成员的潜在“自上而下”控制。这项研究揭示了在以藻类为主的各种冰川栖息地中前所未有地存在着多样化的 NCLDV 群落。&lt;/p&gt;
&lt;h3 id=&#34;关键结果-1&#34;&gt;关键结果&lt;/h3&gt;
&lt;h3 id=&#34;方法&#34;&gt;方法&lt;/h3&gt;
&lt;p&gt;巨型病毒宏基因组组装基因组（GVMAG）是通过使用&amp;gt;=5000个碱基对重叠群与MetaBAT2（v2.12.1）[83]进行分箱而创建的。使用 ViralRecall (v2) [57] 分析生成的 bin 中的 NCLDV 标记基因，如果它们具有 5 个或更多标记基因、基因组大于 100 kbp 以及在其他 NCLDV 基因组中的分类位置，则被视为 GVMAG [51]。 CoverM (v 0.6.1) (&lt;a class=&#34;link&#34; href=&#34;https://github.com/wwood/CoverM&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/wwood/CoverM&lt;/a&gt;) 用于评估所有 57 个生成的组件和环境样本读数（18 个宏基因组、19 个宏转录组和 1 个宏病毒组）之间的读数招募。 GVMAG 功能注释通过 InterPro [84] 和 GVOG [50] 进行评估。&lt;/p&gt;
&lt;p&gt;ViralRecall was used to identify NCLDV-like sequences and viral-like regions in all the metagenome, metatranscriptomes, metavirome, and pure algal culture. Options used were as follows: -db marker -c. The “marker” option was used to only search against 10 NCLDV marker genes, encoding for factors for maturation of the viral capsid (MCPs), packaging ATPase (A32), DNA polymerase elongation subunit family B (PolB), D5-like helicase-primase (D5), mRNA-capping enzyme (mRNAc), RNA polymerase large and small subunit (RNApl, RNAps), DNA or RNA helicases of superfamily II (RNR, SFII), and poxvirus late transcription factor VLTF3 like (VLTF3). All resulting hits with an e-value less than e^-10 were used further. These genes are universal NCLDV marker genes and hence are routinely assessed for identification of signatures of NCLDVs in different ecosystems [51]. PolB is the only marker gene typically found as single copy and is therefore used for phylogenetic placement within known NCLDV families [57].&lt;/p&gt;
&lt;p&gt;ViralRecall 用于识别所有宏基因组、宏转录组、宏病毒组和纯藻类培养物中的 NCLDV 样序列和病毒样区域。使用的选项如下：-db 标记-c。 “标记”选项仅用于搜索 10 个 NCLDV 标记基因，编码病毒衣壳 (MCP) 成熟因子、包装 ATP 酶 (A32)、DNA 聚合酶延伸亚基家族 B (PolB)、D5 样解旋酶 -引物酶 (D5)、mRNA 加帽酶 (mRNAc)、RNA 聚合酶大亚基和小亚基（RNApl、RNAps）、超家族 II 的 DNA 或 RNA 解旋酶（RNR、SFII）和痘病毒晚期转录因子 VLTF3 样（VLTF3）。所有 e 值小于 e^-10 的结果命中均被进一步使用。这些基因是通用的 NCLDV 标记基因，因此经常进行评估，以识别不同生态系统中 NCLDV 的特征 [51]。 PolB 是唯一通常以单拷贝形式发现的标记基因，因此用于已知 NCLDV 家族中的系统发育定位 [57]。&lt;/p&gt;
&lt;p&gt;为了确认病毒样区域属于 NCLDV 家族，使用了针对 NCBI nr 的blastp 函数，并针对由 ViralRecall 分类为可能的 NCLDV 基因的每个序列验证了 50 个最高命中。当 NCLDV 结果位于前 10 名命中之内时，该基因被视为来自 NCLDV。通过 NCBI nr 验证之前和之后，通过对 e 值截止值为 1×10−10 的标记基因求和并归一化到总文库大小，计算每个样本中 10 个 NCLDV 核心基因的总丰度。选择病毒标记基因相对存在率最高的 19 个环境样本中的 4 个（MG3、MG8、MG12 和 MG28；图 2）进行更深度的重新测序，以提供更高的测序覆盖率并增加组装 GVMAG。&lt;/p&gt;
&lt;h4 id=&#34;viralrecall使用&#34;&gt;ViralRecall使用：&lt;/h4&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/faylward/viralrecall&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/faylward/viralrecall&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/faylward/viralrecall.git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; viralrecall
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#发现deepbgc环境基本满足，主要是prodigal和hmmer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda activate deepbgc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#下载数据库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wget -O hmm.tar.gz https://zenodo.org/records/12666277/files/hmm.tar.gz?download&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tar -xvzf hmm.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#测试&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python viralrecall.py -i examples/arm29B.fna -p test_outdir -t &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; -f
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;gvmags&#34;&gt;GVMAGs&lt;/h4&gt;
&lt;p&gt;外部核细胞病毒基因组是从之前发表的研究中下载的 [50, 91]。所有 1171 个外部基因组和我们的 10 个 GVMAG 使用 ncldv_markersearch.py进行比对（最后更新于 2022 年 4 月 21 日，github.com/faylward/ncldv_markersearch）。使用 IQ-TREE 和 LG+F+I+G4 模型以及 -B 超快 1000 个引导程序构建最大似然系统发育树 [90]。系统发育分配是根据以前的文献[51]进行的。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.3001430&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.3001430&lt;/a&gt;
A phylogenomic framework for charting the diversity and evolution of giant viruses&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://zenodo.org/records/6382754#.Y-Pxw-zML0s&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zenodo.org/records/6382754#.Y-Pxw-zML0s&lt;/a&gt; ，1175个Representative giant virus genomes。&lt;/p&gt;
&lt;p&gt;核细胞病毒门的大型 DNA 病毒最近已成为全球生态系统的重要成员，挑战了病毒复杂性的传统观点。最近报道了该门的许多成员无法分类到已建立的科中，目前强烈需要这些病毒的强大的系统发育和分类学框架。在这里，我们报告了核细胞病毒门的全面系统发育分析，提出了一组巨型病毒直系同源群（GVOG）以及基准参考系统发育，并描绘了该门内的分层分类学。我们表明，大多数核细胞病毒多样性可分为 6 个目、32 个科和 344 个属，大大扩展了目前公认的这些病毒的分类等级数量。我们将我们的结果整合到所有病毒都采用的分类法中，为核细胞病毒多样性、进化和环境分布的研究建立一个统一的框架。&lt;/p&gt;
&lt;h4 id=&#34;ncldv_markersearch&#34;&gt;ncldv_markersearch&lt;/h4&gt;
&lt;p&gt;用于识别 Nucleocytoviricota 中的系统发育标记基因并生成串联比对的工具。&lt;/p&gt;
&lt;p&gt;该脚本将根据一组 10 个精心策划的隐马尔可夫模型搜索蛋白质文件，以查找核胞质大 DNA 病毒 (NCLDV) 中普遍存在的蛋白质家族。命中相同 HMM、与该 HMM 形成非重叠比对、并且位于同一重叠群上某个确定的邻近范围内的蛋白质将连接在一起并作为单个氨基酸序列输出。这有助于对具有分裂基因的 NCLDV 进行系统发育分析。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/faylward/ncldv_markersearch.git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ncldv_markersearch
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#发现deepbgc环境基本满足，主要是prodigal和hmmer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda activate deepbgc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python ncldv_markersearch.py -i test_input -n test_run -t &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>使用PhaGCN2/vConTACT2进行病毒分类注释</title>
        <link>https://jb-cao.github.io/Cao-blog/p/vcontact2/</link>
        <pubDate>Wed, 14 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>https://jb-cao.github.io/Cao-blog/p/vcontact2/</guid>
        <description>&lt;img src="https://jb-cao.github.io/Cao-blog/p/vcontact2/images/PhaGCN2.jpeg" alt="Featured image of post 使用PhaGCN2/vConTACT2进行病毒分类注释" /&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;在微生物群落的研究中，分类和注释数量庞大的未培养古细菌和细菌病毒一直是一个难题，主要原因是缺乏统一的分类框架。&lt;/p&gt;
&lt;p&gt;目前，用于病毒分类的多种基于基因组的方法已经被提出，主要集中在细菌、古细菌和真核生物病毒的分类上。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;蛋白序列比较&lt;/strong&gt;：早期方法使用完整基因组的蛋白序列进行配对比较，生成“噬菌体蛋白质树”。但因“镶嵌性”特征影响分类界限，这一方法未被广泛采用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;共享基因的比例&lt;/strong&gt;：另一些方法则基于共享基因的比例和同源基因的百分比定义病毒分类。然而，由于病毒进化模式变化大，这些方法未能有效处理所有已知的病毒群体。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GBDP&lt;/strong&gt;：基于基因组Blast距离的系统发育算法，如VICTOR工具，结合系统发育和聚类方法进行病毒分类。该方法的可扩展性有限，且对缺乏参考基因组的病毒分类效果有限。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基因共享网络&lt;/strong&gt;：基于病毒基因组间共享的蛋白质簇（PCs）构建的基因共享网络，已被证明与ICTV认可的分类基本一致。vConTACT v.1.0应用该方法实现了75%的一致性，并在全球海洋、淡水和土壤研究中用于大规模病毒分类。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;尽管这些方法各有优缺点，但基因共享网络逐渐成为病毒分类的重要工具，尤其在缺乏参考基因组的情况下发挥了关键作用。&lt;/p&gt;
&lt;h2 id=&#34;vcontact2&#34;&gt;vConTACT2&lt;/h2&gt;
&lt;p&gt;vConTACT v.2.0 提供了一种可扩展的网络化解决方案，通过分析全基因组共享的基因模式，结合层次聚类和置信评分，实现病毒分类。它不仅能够成功复现已有的病毒分类，还可以高效处理大型宏基因组数据集，成为病毒分类的强大工具，适用于各种环境中的病毒研究。文章于2019年发表在Nature Biotechnology上[1]。&lt;/p&gt;
&lt;img src=&#34;images/vcontact2.webp&#34; title=&#34;&#34;/&gt;
在网络为基础的基因组分类算法中，相关的基因组通过多个边紧密连接。vConTACT v.2.0使用了一种新的两步聚类算法，以提高分类的准确性和鲁棒性。首先，基于蛋白质簇（PC）的马尔可夫聚类算法 (MCL) 被用于初步分类。然后，使用ClusterONE替代MCL以定义病毒簇（VC），并通过层次聚类进一步细分网络问题区域。此外，v.2.0 引入了拓扑和分类基础的置信度分数，以帮助识别和优化分类任务。
&lt;p&gt;软件主页：&lt;a class=&#34;link&#34; href=&#34;https://github.com/Hocnonsense/vcontact2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/Hocnonsense/vcontact2&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：由于资助结束，vConTACT2 不再被积极开发，尽管作者仍在修复错误并解决出现的其他问题。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 注意使用python3.7而不是直接指定python=3，现在python版本太新了会出问题&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda create --name vContact2 &lt;span class=&#34;nv&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;3.7
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; activate vContact2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda install -y -c bioconda vcontact2 mcl blast diamond
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;再安装一下依赖的cluster_one：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 下载聚类软件，移动到conda/bin路径 (可使用win下载代替)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wget -c http://www.paccanarolab.org/static_content/clusterone/cluster_one-1.0.jar
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;java -jar cluster_one-1.0.jar -h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chmod +x ./cluster_one-1.0.jar
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mv ./cluster_one-1.0.jar ~/miniconda3/bin/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;不然会报错：&lt;code&gt;ERROR:vcontact2: Could not find ClusterONE java file.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;vContact2自带数据库，在&lt;code&gt;~/miniconda3/envs/vContact2/lib/python3.7/site-packages/vcontact2/data/&lt;/code&gt;目录下。&lt;/p&gt;
&lt;h3 id=&#34;运行&#34;&gt;运行&lt;/h3&gt;
&lt;h4 id=&#34;主要参数&#34;&gt;主要参数：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-r RAW_PROTEINS, &amp;ndash;raw-proteins RAW_PROTEINS&lt;/strong&gt;：输入FASTA格式的蛋白质文件。如果同时提供&lt;code&gt;--proteins-fn&lt;/code&gt;，vConTACT将从蛋白质簇(PC)生成前开始处理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;rel-mode {BLASTP, Diamond, MMSeqs2}&lt;/strong&gt;：选择用于创建蛋白质相似性边文件的方法。默认使用Diamond。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-b BLAST_FP, &amp;ndash;blast-fp BLAST_FP&lt;/strong&gt;：输入BLAST结果文件(CSV或TSV格式)，用于生成蛋白质簇。提供此选项时，将从PC生成步骤开始。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-p PROTEINS_FP, &amp;ndash;proteins-fp PROTEINS_FP&lt;/strong&gt;：提供一个文件，将蛋白质名称与基因组名称链接。如果提供了&lt;code&gt;--blast-fp&lt;/code&gt;，则从PC生成步骤开始。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;db {None, ProkaryoticViralRefSeq85-ICTV, &amp;hellip;}&lt;/strong&gt;：选择参考数据库用于去新蛋白质簇生成。默认使用&lt;code&gt;ProkaryoticViralRefSeq85-ICTV&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;pcs-mode {ClusterONE, MCL}&lt;/strong&gt;：选择用于蛋白质簇生成的算法，默认为MCL。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;vcs-mode {ClusterONE, MCL}&lt;/strong&gt;：选择用于病毒簇生成的算法，默认为ClusterONE。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;c1-bin CLUSTER_ONE&lt;/strong&gt;：指定ClusterONE可执行文件的路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;blastp-bin BLASTP_FP&lt;/strong&gt;：指定BLASTP可执行文件的路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;diamond-bin DIAMOND_FP&lt;/strong&gt;：指定DIAMOND可执行文件的路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-o OUTPUT_DIR, &amp;ndash;output-dir OUTPUT_DIR&lt;/strong&gt;：指定输出目录，默认&lt;code&gt;vContact_Output&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-t THREADS, &amp;ndash;threads THREADS&lt;/strong&gt;：设置使用的CPU数量，默认32个。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;输入形式&#34;&gt;输入形式：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;FASTA格式的氨基酸文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt;ref|NP_039777.1| ORF B-251 [Sulfolobus spindle-shaped virus 1]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;MVRNMKMKKSNEWLWLGTKIINAHKTNGFESAIIFGKQGTGKTTYALKVAKEVYQRLGHE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;PDKAWELALDSLFFELKDALRIMKIFRQNDRTIPIIIFDDAGIWLQKYLWYKEEMIKFYR
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;IYNIIRNIVSGVIFTTPSPNDIAFYVREKGWKLIMITRNGRQPDGTPKAVAKIAVNKITI
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;IKGKITNKMKWRTVDDYTVKLPDWVYKEYVERRKVYEEKLLEELDEVLDSDNKTENPSNP
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SLLTKIDDVTR
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt;ref|NP_039778.1| ORF D-335 [Sulfolobus spindle-shaped virus 1]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;MTKDKTRYKYGDYILRERKGRYYVYKLEYENGEVKERYVGPLADVVESYLKMKLGVVGDT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;PLQADPPGFEPGTSGSGGGKEGTERRKIALVANLRQYATDGNIKAFYDYLMNERGISEKT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;AKDYINAISKPYKETRDAQKAYRLFARFLASRNIIHDEFADKILKAVKVKKANADIYIPT
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;一个“基因到基因组”的映射文件，采用tsv（制表符）或csv（逗号）分隔格式。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;protein_id,contig_id,keywords
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ref|NP_039777.1|,Sulfolobus spindle-shaped virus 1,ORF B-251
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ref|NP_039778.1|,Sulfolobus spindle-shaped virus 1,ORF D-335
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ref|NP_039779.1|,Sulfolobus spindle-shaped virus 1,ORF E-54
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ref|NP_039780.1|,Sulfolobus spindle-shaped virus 1,ORF F-92
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ref|NP_039781.1|,Sulfolobus spindle-shaped virus 1,ORF D-244
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ref|NP_039782.1|,Sulfolobus spindle-shaped virus 1,ORF E-178
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ref|NP_039783.1|,Sulfolobus spindle-shaped virus 1,ORF F-93
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ref|NP_039784.1|,Sulfolobus spindle-shaped virus 1,ORF E-51
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ref|NP_039785.1|,Sulfolobus spindle-shaped virus 1,ORF E-96
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;测试数据&#34;&gt;测试数据：&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/Hocnonsense/vcontact2.git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; vcontact2/test_data
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vcontact2 --raw-proteins test_data/VIRSorter_genomes.faa &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --proteins-fp test_data/VIRSorter_genomes_g2g.csv &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --db &lt;span class=&#34;s1&#34;&gt;&amp;#39;ProkaryoticViralRefSeq211-Merged&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --output-dir vConTACT2_Results
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;运行时间还挺久的，输入文件有11个病毒contig，共433个gene。给了4核16G内存，结果跑了6485s，平均占用10.6GB内存。&lt;/p&gt;
&lt;p&gt;应该要给多一点线程。&lt;/p&gt;
&lt;h3 id=&#34;输出&#34;&gt;输出&lt;/h3&gt;
&lt;p&gt;vConTACT2 生成了很多输出文件，其中大多数是临时或中间文件，对一般用户没有用处。最重要的文件是网络和注释文件。&lt;/p&gt;
&lt;h4 id=&#34;genome_by_genome_overviewcsv&#34;&gt;genome_by_genome_overview.csv&lt;/h4&gt;
&lt;p&gt;包含参考基因组的所有分类信息，以及所有聚类信息（初始 VC (VC_22)、精炼 VC (VC_22_1)）、置信度指标和杂项分数。&lt;/p&gt;
&lt;p&gt;一个重要的注意事项是，用户序列不包含分类信息。这意味着每个用户都需要找到他们感兴趣的基因组并检查参考基因组是否位于同一 VC 中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果用户基因组与参考基因组位于同一 VC 子簇内，则用户基因组属于同一属的可能性非常高。&lt;/li&gt;
&lt;li&gt;如果用户基因组与参考基因组位于同一 VC 但不在同一子簇中，则两个基因组很可能在大致属亚科水平上相关。&lt;/li&gt;
&lt;li&gt;如果同一 VC 或 VC 子簇中没有参考基因组，那么它们很可能在属水平上根本不相关。也就是说它们有可能在更高的分类水平上相关（亚科、科、目）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每列名称：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1	Genome	基因组/序列名&lt;/li&gt;
&lt;li&gt;2-4	Order/Family/Genus	目/科/属&lt;/li&gt;
&lt;li&gt;5	preVC	初始病毒聚类&lt;/li&gt;
&lt;li&gt;6	VC Status	病毒聚类状态&lt;/li&gt;
&lt;li&gt;7	VC	病毒聚类&lt;/li&gt;
&lt;li&gt;8	VC Size	病毒聚类数&lt;/li&gt;
&lt;li&gt;9	Quality	质量值&lt;/li&gt;
&lt;li&gt;10	Adjusted P-value	调整后的P值&lt;/li&gt;
&lt;li&gt;11	VC Avg Distance	病毒聚类平均距离&lt;/li&gt;
&lt;li&gt;12	Topology Confidence Score	拓扑学置信度&lt;/li&gt;
&lt;li&gt;13	Genus Confidence Score	属级分类置信度&lt;/li&gt;
&lt;li&gt;14-16	VC Orders/Families/Genra	病毒聚类目/科/属数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;c1ntw&#34;&gt;c1.ntw&lt;/h4&gt;
&lt;p&gt;包含高于显着性阈值的所有基因组对的源/目标/边缘权重信息，该显着性阈值由这两个基因组共享 N 个基因的概率确定。该文件中的最小值必须大于最小显着性阈值（默认值：1）。&lt;/p&gt;
&lt;p&gt;要在 Gephi 或 Cytoscape 中创建网络图形，用户需要将此文件导入到他们喜欢的程序中。
导入后，用户可以添加一个“注释文件” ，可以是genome_by_genome_overview.csv。
每个基因组的注释信息将被添加到网络中的每个节点/基因组。然后，用户可以通过注释文件中的任意属性对网络图形进行着色。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：很多时候，用户会注意到他们的基因组连接到网络中的另一个（可能是参考）基因组，但这两个基因组不会位于同一个 VC 子簇中，甚至不会位于同一个 VC 中。这并不意味着它们没有相关性，只是意味着它们的基因共享比例不够大，无法属于同一属。他们在亚科或科层面上可能有很大的关联。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;可在&lt;a class=&#34;link&#34; href=&#34;https://dx.doi.org/10.17504/protocols.io.x5xfq7n&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://dx.doi.org/10.17504/protocols.io.x5xfq7n&lt;/a&gt;找到详细的说明。&lt;/p&gt;
&lt;img src=&#34;images/bbcza.png&#34; title=&#34;&#34;/&gt;
&lt;h2 id=&#34;phagcn2&#34;&gt;PhaGCN2&lt;/h2&gt;
&lt;img src=&#34;images/PhaGCN2.jpeg&#34; title=&#34;&#34;/&gt;
&lt;p&gt;PhaGCN2是一种可以快速分类病毒序列的工具，能够在科水平上进行分类，并支持所有科之间关系的可视化。文章于2022年发表在Briefings in Bioinformatics上[2]。&lt;/p&gt;
&lt;p&gt;PhaGCN2的性能与其他先进的病毒分类工具（如vConTACT2、CAT和VPF-Class）进行比较显示，PhaGCN2在病毒分类的精度和召回率上大大提高，并且显著增加了可分类病毒序列的数量。它将全球海洋病毒组数据库（Global Ocean Virome）中的可分类序列数量提高了四倍，并且能够对超过90%的肠道噬菌体数据库（Gut Phage Database）进行分类。PhaGCN2使得国际病毒分类委员会数据库（ICTV）的大规模、自动化扩展成为可能。&lt;/p&gt;
&lt;p&gt;软件主页：&lt;a class=&#34;link&#34; href=&#34;https://github.com/KennthShang/PhaGCN2.0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/KennthShang/PhaGCN2.0&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装-1&#34;&gt;安装&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/KennthShang/PhaGCN2.0.git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; PhaGCN2.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rm supplementary&lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;file/ __pycache__/ pred/ final_prediction.csv -rf
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vi run_KnowledgeGraph.py &lt;span class=&#34;c1&#34;&gt;# 把第169行注释掉，因为不需要再建一次数据库。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda env create -f environment.yaml -n phagcn2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 准备数据库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; database
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tar -zxvf ALL_protein.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;diamond makedb --in ALL_protein.fasta -d database.dmnd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;diamond blastp --sensitive -d database.dmnd -q ALL_protein.fasta -o database.self-diamond.tab
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;$1!=$2 {{print $1,$2,$11}}&amp;#39;&lt;/span&gt; database.self-diamond.tab &amp;gt; database.self-diamond.tab.abc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;运行-1&#34;&gt;运行&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ python run_Speed_up.py -h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;usage: run_Speed_up.py [-h] [--contigs CONTIGS] [--len LEN]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;manual to this script
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;optional arguments:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -h, --help         show this help message and exit
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --contigs CONTIGS
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --len LEN
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;该程序有两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--contigs&lt;/code&gt; 是 contigs 文件的路径。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--len&lt;/code&gt; 是您要预测的重叠群的长度。正如我们的论文所示，随着重叠群长度的增加，查全率和查准率也会增加。我们建议您根据需要选择合适的长度。默认长度为 8000bp。支持的最短长度为1700bp。输出文件为final_prediction.csv。此 csv 文件中有三列：“contig_name、median_file_name、prediction”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;示例&#34;&gt;示例：&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda activate phagcn2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;MKL_SERVICE_FORCE_INTEL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#要设置一下这个&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python run_Speed_up.py --contigs contigs.fa --len &lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意，该程序没有指定输出路程，会在当前目录生成，每次重跑会覆盖之前的内容😂，而且因为它的环境路径也不是绝对的，所以只能在PhaGCN2.0目录下跑，所以也不能同时跑多个任务&lt;/strong&gt;，作者暂时也没有修改这个问题：&lt;a class=&#34;link&#34; href=&#34;https://github.com/KennthShang/PhaGCN2.0/issues/10&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/KennthShang/PhaGCN2.0/issues/10&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;所以最好在运行该程序之前先切换到相应的输出目录（把运行文件全部拷贝到该目录），或者每次运行完把结果移动到输出目录。&lt;/p&gt;
&lt;p&gt;每次运行完把结果再移动到输出目录的策略还是有不足，会导致无法同时运行多个任务，所以选择前者。&lt;/p&gt;
&lt;p&gt;我们可以看一下run_Speed_up.py具体的几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;diamond，blastp 数据库准备，这里只需要运行一遍就好了，不知道为啥要放在run_Speed_up.py里每次都运行，至少还需要几十分钟呢。&lt;/li&gt;
&lt;li&gt;把我们输入的contigs分割为每1000条序列一个子文件，过滤掉小于8000的序列，放在Split_files/下。&lt;/li&gt;
&lt;li&gt;循环每个子文件：
&lt;ol&gt;
&lt;li&gt;把子文件mv到input/下，运行run_CNN.py，会用到CNN_Classifier/目录，得到Cyber_data/contig.F&lt;/li&gt;
&lt;li&gt;运行run_KnowledgeGraph.py，生成中间文件single_contig/，all_proteins/，network/，输出到out/和Cyber_data/&lt;/li&gt;
&lt;li&gt;运行run_GCN.py，得到prediction.csv，&lt;/li&gt;
&lt;li&gt;整理子文件输出，放在pred/，删除中间文件&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;合并所有子文件输出，运行run_network.py&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以还是选择自己写一个pipeline来跑吧，方便指定输出位置以及同时跑多个任务，不用run_Speed_up.py：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 打印帮助信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;usage&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Usage: &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; -p &amp;lt;phaGCN_dir&amp;gt; -i &amp;lt;input_file&amp;gt; -o &amp;lt;output_dir&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 解析命令行参数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;getopts&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;:p:i:o:&amp;#34;&lt;/span&gt; opt&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;opt&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; in
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        p&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nv&#34;&gt;phaGCN_dir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;OPTARG&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        i&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nv&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;OPTARG&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        o&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nv&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;OPTARG&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        *&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            usage
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 检查是否提供了所有参数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;phaGCN_dir&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    usage
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 将路径转换为绝对路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;phaGCN_dir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;dirname &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$phaGCN_dir&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;basename &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$phaGCN_dir&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;dirname &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$input&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;basename &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$input&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;dirname &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$output&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;basename &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$output&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 检查输出目录是否存在且非空&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$output&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;ls -A &lt;span class=&#34;nv&#34;&gt;$output&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Error: Output directory &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$output&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; already exists and is not empty.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 创建输出目录并进入&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir -p &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$output&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$output&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 复制 Python 脚本和 C 相关内容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cp &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;phaGCN_dir&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;/*.py ./
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cp -r &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;phaGCN_dir&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/C&amp;#34;&lt;/span&gt;* ./
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 创建 database 目录的符号链接&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ln -s &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;phaGCN_dir&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/database/&amp;#34;&lt;/span&gt; ./
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 创建 input 目录并复制输入文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir input/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cp &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$input&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; input/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 运行各个 Python 脚本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Running CNN...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python run_CNN.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Running KnowledgeGraph...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir network
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python run_KnowledgeGraph.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Running GCN...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python run_GCN.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;All tasks completed.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 删除拷贝过来的脚本和目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rm -rf *.py C* database
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;把上面内容拷贝到名为 run_phagcn的文件，注意修改~/biosoft/PhaGCN2.0为自己目录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vi run_phagcn
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chmod +x run_phagcn
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 链接到环境变量目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ln -s ~/biosoft/PhaGCN2.0/run_phagcn ~/miniconda3/envs/phagcn2/bin/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这样就可以在任意目录运行该程序并指定输出了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/work/test/phagcn2_test
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 注意input不要是contigs.fa，不然会覆盖&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cp ~/biosoft/PhaGCN2.0/contigs.fa ./test_contigs.fa
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;run_phagcn -p ~/biosoft/PhaGCN2.0/ -i test_contigs.fa -o ~/work/test/phagcn2_test/output
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;结果就是prediction.csv文件和network/phage_0.ntw文件，network/phage_0.ntw可以类似上述方法画一个网络图。&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Bin Jang, H., Bolduc, B., Zablocki, O. et al. Taxonomic assignment of uncultivated prokaryotic virus genomes is enabled by gene-sharing networks. Nat Biotechnol 37, 632–639 (2019). &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1038/s41587-019-0100-8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doi.org/10.1038/s41587-019-0100-8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jing-Zhe Jiang, Wen-Guang Yuan, Jiayu Shang, Ying-Hui Shi, Li-Ling Yang, Min Liu, Peng Zhu, Tao Jin, Yanni Sun, Li-Hong Yuan, Virus classification for viral genomic fragments using PhaGCN2, Briefings in Bioinformatics, 2022;, bbac505, &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1093/bib/bbac505&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doi.org/10.1093/bib/bbac505&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>病毒相关内容学习</title>
        <link>https://jb-cao.github.io/Cao-blog/p/learn-virus/</link>
        <pubDate>Tue, 13 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>https://jb-cao.github.io/Cao-blog/p/learn-virus/</guid>
        <description>&lt;img src="https://jb-cao.github.io/Cao-blog/p/learn-virus/images/Virus_Baltimore_Classification.png" alt="Featured image of post 病毒相关内容学习" /&gt;&lt;h2 id=&#34;什么是病毒&#34;&gt;什么是病毒？&lt;/h2&gt;
&lt;p&gt;病毒是一种非常微小的、非细胞结构的病原体，它只能在宿主细胞内生长繁殖。与细菌不同，病毒本身没有完整的细胞结构，也无法进行独立的生命活动（如代谢、繁殖）。它们由遗传物质（DNA或RNA）和蛋白质外壳组成，少数病毒还带有脂质包膜。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;病毒的基本特征：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;结构简单&lt;/strong&gt;：病毒的结构通常包括核酸（DNA或RNA）和蛋白质外壳（称为衣壳）。有些病毒外面还有一层由宿主细胞膜衍生来的包膜。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;寄生性&lt;/strong&gt;：病毒必须依赖宿主细胞才能复制。它们入侵宿主细胞后，将自身的遗传物质注入宿主细胞，并利用宿主的代谢系统进行复制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;没有独立的生命活动&lt;/strong&gt;：病毒不能独立进行代谢、运动、繁殖等生命活动，必须在宿主细胞内进行复制和增殖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;特异性&lt;/strong&gt;：病毒通常具有特异性，即它们只感染某些特定的宿主细胞。例如，某些病毒只感染植物，某些病毒只感染动物，还有些病毒专门感染细菌（称为噬菌体）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;病毒的传播：
病毒可以通过多种途径传播，包括空气传播（如流感病毒）、体液传播（如艾滋病毒）、接触传播（如疱疹病毒）、蚊虫叮咬传播（如登革热病毒）等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;病毒引发的疾病：
病毒可以引发多种疾病，包括感冒、流感、艾滋病、乙型肝炎、狂犬病、新冠肺炎等。治疗病毒感染通常需要抗病毒药物，而预防病毒感染常用疫苗。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分类系统&#34;&gt;分类系统&lt;/h2&gt;
&lt;p&gt;病毒的分类主要依据以下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;病毒颗粒的特性&lt;/strong&gt;：如病毒的形状、大小、是否有包膜等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;抗原特性&lt;/strong&gt;：指病毒表面蛋白的特性，这些蛋白决定了病毒与宿主细胞的相互作用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生物特性&lt;/strong&gt;：包括病毒的基因组类型（DNA或RNA）、复制方式、宿主范围等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当前，只有一小部分的病毒得到了详细研究。来自人体的病毒样品中，有约20%的序列是未曾发现过的，而从环境（如海水、大洋沉积物等）中采集的病毒样品中，大部分序列都是全新的。这表明我们对病毒世界的了解还非常有限，未来的研究可能会发现更多新病毒，进一步丰富和复杂化现有的病毒分类系统。&lt;/p&gt;
&lt;h3 id=&#34;ictv病毒分类&#34;&gt;ICTV病毒分类&lt;/h3&gt;
&lt;p&gt;ICTV于1966年建立了病毒分类的通用系统和统一的命名法则。这个系统是目前唯一一个被广泛接受的病毒分类标准。ICTV是国际微生物学联合会（International Union of Microbiological Societies, IUMS）下属的机构，负责发展、改进和维护这个病毒分类系统。&lt;/p&gt;
&lt;p&gt;官方网站：&lt;a class=&#34;link&#34; href=&#34;https://ictv.global/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ictv.global/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;病毒分类的层次
ICTV的分类系统从最广泛的域（Realm）开始，逐步细化到种（Species）这个最低的分类单元。以下是各个层级及其对应的分类后缀：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;域（Realm）&lt;/strong&gt;：-viria&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;亚域（Subrealm）&lt;/strong&gt;：-vira&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;界（Kingdom）&lt;/strong&gt;：-viriae&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;亚界（Subkingdom）&lt;/strong&gt;：-virites&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;门（Phylum）&lt;/strong&gt;：-viricota&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;亚门（Subphylum）&lt;/strong&gt;：-viricotina&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;纲（Class）&lt;/strong&gt;：-viricetes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;亚纲（Subclass）&lt;/strong&gt;：-viricetidae&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目（Order）&lt;/strong&gt;：-virales&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;亚目（Suborder）&lt;/strong&gt;：-virineae&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;科（Family）&lt;/strong&gt;：-viridae&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;亚科（Subfamily）&lt;/strong&gt;：-virinae&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;属（Genus）&lt;/strong&gt;：-virus&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;亚属（Subgenus）&lt;/strong&gt;：-virus&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;种（Species）&lt;/strong&gt;：通常以[疾病]病毒的形式出现。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们可以去官网下载文件后看看主要的门类，目前（2024.8.12）共有14,690种有命名的病毒：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dplyr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ICTV&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;readxl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;read_excel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;~/database/ICTV_Master_Species_List_2023_MSL39.v3.xlsx&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sheet&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ICTV&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ICTV[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Realm&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Kingdom&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Phylum&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Class&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Order&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Family&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Genus&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Species&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Genome Composition&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ICTV&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Realm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Kingdom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Phylum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;arrange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;na.omit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&amp;gt;%&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;my_sankey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;img src=&#34;images/Pasted image 20240812125208.png&#34; title=&#34;&#34; width=&#34;40%&#34;/&gt;
&lt;p&gt;以下是主要病毒域及其门类的介绍：&lt;/p&gt;
&lt;p&gt;以下是各个病毒域及其主要门类的详细介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A型DNA病毒域 (Adnaviria)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;特征&lt;/strong&gt;：包含环状或线状双链DNA病毒，常感染古细菌，具有独特的DNA包装和复制机制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;齐利希病毒界 (Zilligvirae)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;杆状病毒门 (Taleaviricota)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双链DNA病毒域 (Duplodnaviria)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;特征&lt;/strong&gt;: 包含双链DNA病毒，具有独特的DNA包装和复制机制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;香港病毒界 (Heunggongvirae)&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;衣壳病毒门 (Peploviricota)&lt;/strong&gt;：具有二十面体衣壳和外膜，附有糖蛋白。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;尾噬菌体门 (Uroviricota)&lt;/strong&gt;：通过尾状结构将DNA注入宿主。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单链DNA病毒域 (Monodnaviria)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;特征&lt;/strong&gt;：包含单链DNA病毒，通常感染真核生物。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;洛布病毒界 (Loebvirae)&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;霍夫奈病毒门 (Hofneiviricota)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;桑格病毒界 (Sangervirae)&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;菲克斯病毒门 (Phixviricota)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;称徳病毒界 (Shotokuvirae)&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;科萨特病毒门 (Cossaviricota)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;单环编码病毒门 (Cressdnaviricota)&lt;/strong&gt;：编码复制相关蛋白的环状单链DNA病毒。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特拉帕尼病毒界 (Trapavirae)&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;嗜盐病毒门 (Saleviricota)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;核糖病毒域 (Riboviria)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;特征&lt;/strong&gt;：包含所有RNA病毒，具有单链正负链RNA基因组。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;正RNA病毒界 (Orthornavirae)&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;双链RNA病毒门 (Duplornaviricota)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;光滑裸露病毒门 (Lenarviricota)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;黄色病毒门 (Kitrinoviricota)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;负核糖病毒门 (Negarnaviricota)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;小RNA病毒超群门 (Pisuviricota)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;副RNA病毒界 (Pararnavirae)&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;酶录转逆病毒门 (Artverviricota)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;核酶病毒域 (Ribozyviria)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;特征&lt;/strong&gt;：包含单一属的病毒，具有环状RNA，类似核酶的功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主要门类&lt;/strong&gt;：未列出具体门类。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多变DNA病毒域 (Varidnaviria)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;特征&lt;/strong&gt;：包含多种DNA病毒，具有衣壳基因的广泛变化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;班福病毒界 (Bamfordvirae)&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;核质病毒门 (Nucleocytoviricota)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;质粒前体病毒门 (Preplasmiviricota)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;海尔维蒂病毒界 (Helvetiavirae)&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分隔病毒门 (Dividoviricota)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;巴尔的摩分类法&#34;&gt;巴尔的摩分类法&lt;/h3&gt;
&lt;img src=&#34;images/Virus_Baltimore_Classification.png&#34; title=&#34;&#34; width=&#34;60%&#34;/&gt;
&lt;p&gt;巴尔的摩分类法（Baltimore classification）是由美国生物学家戴维·巴尔的摩（David Baltimore）于1971年提出的一种病毒分类方法。与ICTV分类法基于病毒的结构和其他生物特性不同，巴尔的摩分类法主要依据病毒的基因组类型和病毒复制过程中的信使RNA（mRNA）合成方式进行分类。这个分类方法将病毒分为七大类，每一类对应一种特定的基因组类型和复制机制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;巴尔的摩分类法的七大类：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I类：双链DNA病毒（dsDNA）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基因组&lt;/strong&gt;：双链DNA。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mRNA合成&lt;/strong&gt;：宿主细胞的RNA聚合酶直接转录mRNA。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代表病毒&lt;/strong&gt;：腺病毒、疱疹病毒、痘病毒等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;II类：单链DNA病毒（ssDNA）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基因组&lt;/strong&gt;：单链DNA。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mRNA合成&lt;/strong&gt;：单链DNA在宿主细胞中形成双链DNA，然后由宿主细胞的RNA聚合酶转录mRNA。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代表病毒&lt;/strong&gt;：细小病毒等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;III类：双链RNA病毒（dsRNA）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基因组&lt;/strong&gt;：双链RNA。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mRNA合成&lt;/strong&gt;：病毒自带的RNA依赖性RNA聚合酶将双链RNA中的一条链直接转录为mRNA。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代表病毒&lt;/strong&gt;：轮状病毒等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;IV类：正义单链RNA病毒（(+)-ssRNA）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基因组&lt;/strong&gt;：正义单链RNA，即直接作为mRNA使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mRNA合成&lt;/strong&gt;：基因组RNA本身就是mRNA，可以直接被翻译成蛋白质。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代表病毒&lt;/strong&gt;：冠状病毒、脊髓灰质炎病毒、黄病毒等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;V类：负义单链RNA病毒（(-)-ssRNA）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基因组&lt;/strong&gt;：负义单链RNA。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mRNA合成&lt;/strong&gt;：病毒自带的RNA依赖性RNA聚合酶将负义RNA转录为正义mRNA。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代表病毒&lt;/strong&gt;：流感病毒、狂犬病毒、麻疹病毒等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;VI类：反转录RNA病毒（Retroviruses）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基因组&lt;/strong&gt;：正义单链RNA。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mRNA合成&lt;/strong&gt;：病毒自带的逆转录酶将RNA逆转录为双链DNA，双链DNA整合到宿主基因组中，宿主细胞的RNA聚合酶再转录mRNA。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代表病毒&lt;/strong&gt;：人类免疫缺陷病毒（HIV）等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;VII类：反转录DNA病毒（Pararetroviruses）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基因组&lt;/strong&gt;：部分双链DNA，带有缺口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mRNA合成&lt;/strong&gt;：缺口的双链DNA在宿主细胞内修复成为完整的双链DNA，由宿主的RNA聚合酶转录mRNA。部分mRNA通过逆转录形成DNA，并整合到宿主基因组中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代表病毒&lt;/strong&gt;：乙型肝炎病毒（HBV）等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;亚病毒因子&#34;&gt;亚病毒因子&lt;/h3&gt;
&lt;p&gt;亚病毒因子是指比病毒更简单的病原体，包括类病毒、卫星病毒和朊病毒等。它们通常没有完整的病毒结构，缺乏自身复制所需的酶或结构蛋白，依赖宿主或协助病毒的机制进行繁殖。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;类病毒&lt;/strong&gt;：由单一的环状RNA分子组成，感染植物。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;卫星病毒&lt;/strong&gt;：依赖辅助病毒进行复制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;朊病毒&lt;/strong&gt;：异常折叠的蛋白质，能导致神经退行性疾病。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些因子尽管简单，却可能导致严重的疾病。&lt;/p&gt;
&lt;h2 id=&#34;结构&#34;&gt;结构&lt;/h2&gt;
&lt;img src=&#34;images/viruses-exhibit_spotlight_v_types_ill.jpg&#34; title=&#34;&#34;/&gt;
&lt;p&gt;病毒的形态和大小多种多样，大多数病毒直径在10至300纳米之间。某些丝状病毒长度可达1400纳米，但宽度只有约80纳米。病毒的形态主要有以下四种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;螺旋形&lt;/strong&gt;：核酸与蛋白质亚基形成螺旋状结构，如烟草花叶病毒。螺旋形病毒的长度取决于核酸的长度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;正二十面体形&lt;/strong&gt;：多见于动物病毒，结构为正二十面体，如腺病毒。这种结构具有对称性，可以最小化形成衣壳所需的能量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;包膜型&lt;/strong&gt;：包膜由宿主细胞膜改造形成，包裹在核衣壳外，如流感病毒。包膜使病毒能够通过细胞膜与宿主细胞融合，从而不必导致宿主细胞死亡。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;复合型&lt;/strong&gt;：结构复杂，既非完全螺旋形也非完全正二十面体形，如有尾噬菌体和痘病毒。复合型病毒常有附加结构，如尾部或外壁，参与感染过程。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;病毒颗粒（病毒体）由蛋白质组成的衣壳和内部核酸组成。衣壳的形状由病毒基因组编码的蛋白质决定，通常可以自组装形成。某些病毒还有包膜，包膜内含有来自宿主细胞的脂质、糖类和病毒编码的膜蛋白。包膜型病毒的感染性依赖于包膜。病毒形态学研究通常通过电子显微镜和负染色技术进行观察。&lt;/p&gt;
&lt;h2 id=&#34;生命周期&#34;&gt;生命周期&lt;/h2&gt;
&lt;img src=&#34;images/Virus_Replication_zh.svg.png&#34; title=&#34;&#34;/&gt;
&lt;p&gt;病毒的生命周期分为六个主要阶段，各阶段间的差异取决于病毒类型，但总体流程相似：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;附着 (Attachment)&lt;/strong&gt;：病毒通过其衣壳蛋白与宿主细胞表面的特定受体结合。这种结合决定了病毒的宿主范围，例如HIV特异性结合人类T细胞的CD4分子。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;穿入 (Penetration)&lt;/strong&gt;：病毒通过受体介导的胞吞或膜融合进入宿主细胞。植物病毒通常通过伤口进入细胞，而噬菌体则通过注入DNA的方式感染细菌。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;脱壳 (Uncoating)&lt;/strong&gt;：病毒的衣壳在宿主细胞内被酶降解，释放出病毒的核酸。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;合成 (Replication)&lt;/strong&gt;：病毒基因组在宿主细胞内复制，并利用宿主的酶系统进行转录和蛋白质合成。在这一阶段，病毒的结构成分开始合成，病毒的复制也开始。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;组装 (Assembly)&lt;/strong&gt;：新合成的病毒核酸与衣壳蛋白组装成新的病毒颗粒。DNA病毒通常在细胞核内组装，而RNA病毒则在细胞质中完成组装。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;释放 (Release)&lt;/strong&gt;：无包膜病毒通过细胞裂解（lysis）释放，包膜病毒则通过出芽 (budding) 方式离开宿主细胞。在出芽过程中，病毒从宿主细胞膜中获取包膜，包膜上嵌有病毒的表面蛋白。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;病毒基因组的复制方式因其遗传物质的类型不同而有所差异：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DNA病毒&lt;/strong&gt;：大多数DNA病毒在宿主细胞核内复制。它们依赖宿主细胞的DNA和RNA合成机制，基因组需穿过核膜以控制这些工具。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;RNA病毒&lt;/strong&gt;：RNA病毒在细胞质内复制，使用自身的RNA复制酶。其复制机制取决于RNA的极性和链数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;反转录病毒&lt;/strong&gt;：这些病毒利用反转录酶将RNA模板转化为DNA，或将DNA模板转化为RNA，并将生成的DNA整合入宿主基因组中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;功能&#34;&gt;功能&lt;/h2&gt;
&lt;p&gt;病毒在环境生态和人类健康中扮演着复杂而重要的角色：&lt;/p&gt;
&lt;h3 id=&#34;环境生态方面&#34;&gt;环境生态方面&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;生态平衡&lt;/strong&gt;：病毒可以通过感染和控制微生物种群，帮助维持生态系统的平衡。例如，噬菌体可以调节细菌的数量，从而影响微生物群落的结构和功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;物质循环&lt;/strong&gt;：病毒在环境中可以促进物质循环。例如，海洋中的病毒感染细菌，导致细菌裂解，这释放出有机物质，供其他微生物利用，促进碳循环和营养物质的循环。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;遗传变异&lt;/strong&gt;：病毒可以通过转导（转移遗传物质）促进基因水平的遗传变异，影响宿主的遗传组成和进化过程。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;对人类健康方面&#34;&gt;对人类健康方面&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;疾病&lt;/strong&gt;：病毒是许多传染病的病原体，如流感、感冒、艾滋病、肝炎等。它们通过感染宿主细胞，破坏正常的生理功能，引发疾病。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;免疫系统&lt;/strong&gt;：某些病毒可以引发免疫反应，增强免疫系统的记忆功能。例如，疫苗接种就是利用病毒的无害部分来激发免疫反应，以保护个体免受未来的感染。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基因治疗&lt;/strong&gt;：病毒可以作为基因递送工具，将治疗性基因引入患者体内，用于治疗一些遗传性疾病。这些病毒通常经过工程化处理，使其不再引起疾病，同时具备高效的基因递送能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;肿瘤治疗&lt;/strong&gt;：一些病毒具有选择性地感染和杀死癌细胞的能力，这为癌症治疗提供了新的方向。例如，工程化的溶瘤病毒可以专门攻击肿瘤细胞，同时减少对正常细胞的损伤。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总的来说，病毒在生态系统中是关键的调节因子，对环境平衡和物质循环起着重要作用；在医学领域，虽然它们可能引起疾病，但也提供了治疗和基因工程的创新机会。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>VirRep: 人类肠道微生物组识别病毒新方法</title>
        <link>https://jb-cao.github.io/Cao-blog/p/virrep/</link>
        <pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate>
        
        <guid>https://jb-cao.github.io/Cao-blog/p/virrep/</guid>
        <description>&lt;img src="https://jb-cao.github.io/Cao-blog/p/virrep/images/workflow.png" alt="Featured image of post VirRep: 人类肠道微生物组识别病毒新方法" /&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;病毒在生态系统中扮演着关键角色，宏基因组中病毒序列的鉴定十分重要。我之前已经介绍过了从宏基因组中&lt;a class=&#34;link&#34; href=&#34;https://asa-blog.netlify.app/p/virus&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;鉴定病毒序列的常用方法&lt;/a&gt;，包括geNomad，DeepVirFinder，VirSorter2等，以及后续的质量评估方法。&lt;/p&gt;
&lt;p&gt;这方面的方法发展还是很快的，最近（2024/07/04），复旦大学赵兴明、华中科技大学陈卫华与团队在Genome Biology上发表研究，开发出一种人类肠道微生物基因组语言混合表征学习框架VriRep，能够整合基因组语义信息和序列同源性表征DNA序列，从而更精准地识别人类肠道环境中的病毒基因组。&lt;/p&gt;
&lt;img src=&#34;images/paper.png&#34; title=&#34;&#34;/&gt;
&lt;p&gt;工具主页：&lt;a class=&#34;link&#34; href=&#34;https://github.com/Dongyq815/VirRep&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/Dongyq815/VirRep&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;原文简介&#34;&gt;原文简介&lt;/h2&gt;
&lt;p&gt;原文：&lt;a class=&#34;link&#34; href=&#34;https://genomebiology.biomedcentral.com/articles/10.1186/s13059-024-03320-9&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://genomebiology.biomedcentral.com/articles/10.1186/s13059-024-03320-9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从宏基因组中识别病毒是探索人类肠道病毒组成的常见步骤。VirRep是一种混合语言表征学习框架，用于从人类肠道宏基因组中识别病毒。
VirRep 结合了上下文感知编码器和进化感知编码器，通过结合 k-mer 模式和序列同源性来改进序列表征。
&lt;strong&gt;对不同病毒比例的模拟和真实数据集进行基准测试表明，VirRep 的性能优于最先进的方法&lt;/strong&gt;。
当应用于结直肠癌队列的粪便宏基因组时，VirRep 识别出 39 种与该疾病相关的高质量病毒种类，其中许多病毒无法通过现有方法检测到。&lt;/p&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;VirRep 是一种混合语言表征学习框架，旨在从人类肠道宏基因组中识别病毒。&lt;/p&gt;
&lt;p&gt;如图 1a 所示，它以 1 kb 长的 DNA 序列及其反向互补链作为输入，其中较长的序列将被分割成 1 kb 长的序列片段。
VirRep 首先将每个序列片段及其反向互补链转换为连续 7-mers的短序列。以标记化的 7-mers序列作为输入，连体神经网络将生成 1 kb 长的序列片段属于病毒的概率，该概率是根据其两条链的病毒分数的平均值计算的。
对于长度超过 1 kb 的序列，VirRep 将预测定义为其所有片段的病毒概率的平均值。
鉴于温和噬菌体经常将其基因组整合到宿主中并在人类肠道中普遍存在，VirRep 还引入了迭代片段延伸机制来检测宿主基因组内的病毒区域。&lt;/p&gt;
&lt;p&gt;VirRep 结合了上下文感知编码器（语义编码器）和进化感知编码器（对齐编码器），以利用 k-mer 模式和序列同源性的优势来提高分类性能（图 1b，方法）。
语义编码器是一个类似 BERT 的神经网络，它通过捕获序列中不同位置的 k-mers 之间的依赖关系来生成全局上下文表征。
比对编码器利用 BiLSTM网络作为主干，通过隐式编码输入序列和原核基因组之间的序列相似性来产生进化表征。
VirRep 集成这两种表征形式以生成信息丰富的序列表征形式。编制了一个大型非冗余的人类肠道微生物基因组数据集来训练 VirRep，包括来自 GVD、GPD、CHVD 和 MGV 的~140,000 个病毒基因组（统称为 GGCM），以及 UHGG 中不同细菌和古菌物种的 4600 多个基因组。&lt;/p&gt;
&lt;img src=&#34;images/workflow.png&#34; title=&#34;&#34;/&gt;
&lt;h3 id=&#34;virrep-能够稳健地检测各种序列长度的病毒&#34;&gt;VirRep 能够稳健地检测各种序列长度的病毒&lt;/h3&gt;
&lt;p&gt;在多个人类肠道病毒组数据集上评估 VirRep，其中每个数据集中的病毒根据序列长度分为 5 组（1.5 k–3 k、3 k–5 k、5 k–10 k、10 k–20） k，&amp;gt;20 k）。作为阴性对照，还收集了等量的由人类肠道宏基因组组装的原核序列。
将 VirRep 与几种流行的病毒识别方法进行了比较，包括最近提出的混合方法（geNomad）、两种基于比对的方法（VIBRANT 和 VirSorter2）和五种免比对方法（VirFinder、DeepVirFinder、PPR-Meta、Seeker 和 INHERIT）。&lt;/p&gt;
&lt;p&gt;首先评估了 GGCM 测试数据集上每种方法的性能。对于不同长度的病毒序列（1.5 k–3 k：0.90、3 k–5 k：0.92、5 k–10 k：0.94、10 k–），VirRep 显着优于其他方法，具有最高的 MCC（马修斯相关系数）值20 k：0.96，&amp;gt;20 k：0.98；图 2a)。
通过更多的评估指标（包括 F1、精确率和召回率），VirRep 在保持较低误报率的同时实现了更高的召回率，从而带来更好的整体性能。
例如，与第二好的方法 geNomad 相比，VirRep 将短于 10 kb 的序列的病毒检出率提高了 2.5-44.2%，同时保持了相当的精度。
与性能最佳的免对齐方法 INHERIT 相比，它的精度提高了 2.5% 至 6.8%，召回率相似。在其他三个数据集（即 IMG/VR-gut、DEVoC 和 GPIC 数据集）上也可以找到类似的结果，其中 VirRep 优于所有其他方法（图 2b-d)。&lt;/p&gt;
&lt;img src=&#34;images/2a.png&#34; title=&#34;&#34;/&gt;
&lt;p&gt;进一步研究了 GGCM 测试数据集上五组不同长度的每种方法的运行时间。每种方法在每个长度间隔对 5000 个序列运行五次。
VirRep 和四种无需对齐的方法（即 INHERIT、DeepVirFinder、PPR-Meta、Seeker）在 NVIDIA A100 GPU 上加速，而 geNomad 和两种基于对齐的方法（VirSorter2 和 VIBRANT）则使用 16 个线程运行。
一般来说，VirRep 比 geNomad 快大约 3-6 倍，比性能最佳的无比对方法 (IHERIT) 快 12-13 倍，比性能最佳的基于比对的方法 (VirSorter2) 快 33-130 倍。(图 2g)。&lt;/p&gt;
&lt;img src=&#34;images/2g.png&#34; title=&#34;&#34;/&gt;
&lt;h3 id=&#34;专用表征学习提高了病毒识别的灵敏度和特异性&#34;&gt;专用表征学习提高了病毒识别的灵敏度和特异性&lt;/h3&gt;
&lt;p&gt;两个专用编码器可以有效地整合学习的 k-mer 模式和序列同源性，生成信息丰富的序列表征，从而通过利用免比对和基于比对的方法实现更灵敏和更精确的病毒识别。
预训练有助于将学习到的 k-mer 组成模式的一般规则快速转移并适应下游任务。
第一阶段的微调使 VirRep 能够学习多视图序列表征。
两个编码器连同预训练和第一阶段微调极大地提高了 VirRep 的整体性能。&lt;/p&gt;
&lt;img src=&#34;images/3a.png&#34; title=&#34;&#34;/&gt;
&lt;h3 id=&#34;virrep-非常适用于批量和富含-vlp-的人类肠道宏基因组样本&#34;&gt;VirRep 非常适用于批量和富含 VLP 的人类肠道宏基因组样本&lt;/h3&gt;
&lt;p&gt;评估了 VirRep 和其他方法在大量宏基因组上的性能（即病毒比例为 5% 和 10% 的数据集；图 4a）。
发现 VirRep 在这两个病毒比例较低的数据集上明显优于其他方法。 VirRep 的平均 AUPRC（精确召回曲线下面积）值超过 0.94，比最近提出的混合方法 geNomad 好 3.0 和 2.0%，比性能最好的免对齐方法 INHERIT 好 8.1 和 4.6% 。
还在两个数据集上测试了 VirRep，其中病毒序列占整个社区的一半或以上。这些数据集是为了模拟富含 VLP 的宏基因组而构建的。尽管大多数评估方法在这两种情况下都表现良好，但 VirRep 获得了最高的 AUPRC 分数（图 4a）。&lt;/p&gt;
&lt;p&gt;此外，将 VirRep 与结合至少两种方法的几种方法进行了比较，其中每种方法结合了至少一种基于比对的方法和一种无比对的方法。与此类组合方法相比，VirRep 单独获得了更好或相当的结果（图 4b）。
这种改善在低病毒比例样本中尤其显著。
对于富含 VLP 的宏基因组，VirRep 仍然实现了最佳的整体性能，尽管改进并不像在批量宏基因组样本上那么明显。&lt;/p&gt;
&lt;p&gt;总之，无论样品中的病毒比例如何，VirRep 都优于最先进的方法及其组合，这表明它非常适合从大量样品和富含 VLP 的宏基因组样品中鉴定病毒基因组。&lt;/p&gt;
&lt;img src=&#34;images/4a.png&#34; title=&#34;&#34;/&gt;
&lt;h3 id=&#34;virrep-识别与结直肠癌相关的病毒种类&#34;&gt;VirRep 识别与结直肠癌相关的病毒种类&lt;/h3&gt;
&lt;p&gt;最近的研究表明肠道微生物组与结直肠癌 (CRC) 的发生有关，但肠道病毒组是否与该疾病有关却知之甚少。
受到 VirRep 在识别人类肠道病毒方面的有效性的启发，应用 VirRep 扫描了 74 名 CRC 患者和 54 名健康个体的真实人类肠道宏基因组。&lt;/p&gt;
&lt;p&gt;使用 VirRep 获得了包含 18,067 个病毒群体（VP，在物种水平）的非冗余集合，与竞争方法相比，增加了 22.3–4285.2%（图 5a） 。使用 CheckV 来评估每个 VP 的完整性。结果，VirRep 鉴定出了最多数量的完整且高质量（完整性 &amp;gt; 90%）的病毒基因组（图 5a）。&lt;/p&gt;
&lt;p&gt;使用blocked Wilcoxon 秩和检验进行差异分析。控制 P&amp;lt;0.001 和 FDR&amp;lt;0.05，我们从 2076 个完整且高质量的 VP 中鉴定出 39 个与 CRC 相关的病毒种类（图 5b）。VirRep 识别出了与 CRC 相关最多的 VP，并且基于该标记集开发的模型实现了最高的诊断功效（图 5c）。39 种病毒中有 23 种仍未被至少一半的竞争方法检测到，其中 2 种被所有方法漏掉（附加文件 1：图 S14）。这两种病毒都是原噬菌体，因为它们是从较长的基因组片段中鉴定出来的。据观察，其中一种 VP1279 在 CRC 患者中含量丰富，而另一种 VP2811 在健康个体中含量更高。
它们都编码几个病毒标志基因，包括终止酶大亚基、主要衣壳蛋白和门户蛋白（图 5d）。系统发育分析表明，它们均属于Caudoviricetes 纲内的未分类科（图5e）。&lt;/p&gt;
&lt;img src=&#34;images/5a.png&#34; title=&#34;&#34;/&gt;
&lt;h2 id=&#34;软件使用&#34;&gt;软件使用&lt;/h2&gt;
&lt;p&gt;目前软件我运行有点问题，所以没有具体的使用测试结果，可能是环境依赖问题，我在github上提了issue，等待后续解决方案，目前可以先看README文件，了解软件的安装和使用方法：&lt;/p&gt;
&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 创建conda环境&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda create -n vr python
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda activate vr
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 1.conda 安装依赖包, 或者用2.pip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda install -c bioconda biopython numpy pandas tqdm scipy scikit-learn packaging
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 2.pip 安装依赖包&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install biopython numpy pandas tqdm scipy scikit-learn packaging
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 1. conda安装pytorch，如果之前没有装过的话，这一步很久的&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda install pytorch torchvision torchaudio pytorch-cuda&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;11.8 -c pytorch -c nvidia
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 2. pip安装torch，如果之前没有装过的话，这一步很久的&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;下载软件包：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone  clone https://github.com/Dongyq815/VirRep.git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; VirRep
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python src/VirRep.py -h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 由于代码要求model文件夹在当前目录下，所以无法添加环境变量，只能在VirRep/src/目录下直接运行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; VirRep/src
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python VirRep.py -h
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;
&lt;p&gt;VirRep 的输入是一个包含要预测的序列的 fasta 文件，输出由一个记录预测得分的 .tsv 文件和一个包含预测病毒序列的 fasta 文件组成。分数越高表明病毒序列的可能性越高。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用VirRep对测试数据集进行GPU加速运行：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python VirRep.py -i ../test/test.fasta -o vr_out -w &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; --use-amp --min-score 1000-5000:0.9,5001-10000:0.8,10001-Inf:0.7
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;输出目录（vr_out）中的文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;test_viruses.fna&lt;/strong&gt;：识别出的病毒序列&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;test_score.tsv&lt;/strong&gt;：每个病毒序列的评分表及其他特征&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;br&gt;
输出文件名附带后缀||full或||partial，表示病毒序列是否从较大的片段中提取。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;跳过迭代段扩展机制运行VirRep：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python VirRep.py -i ../test/test.fasta -o vr_out --use-amp --provirus-off -w &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;用于在基准数据集上与其他方法比较，所有输入序列将在输出的.tsv文件中报告得分。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;在批量宏基因组上运行VirRep&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python VirRep.py -i ../test/toy.fasta -o vr_out --use-amp --conservative -w &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;该模式使用保守设置以减少假阳性，只输出高置信度的病毒序列。&lt;/p&gt;
&lt;p&gt;运行以下命令查看所有选项：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python VirRep.py -h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;usage: VirRep.py &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-h&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; -i INPUT_FILE -o OUTPUT_DIR &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--label LABEL&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-m MODEL&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--use-amp&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--conservative&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-l MINLEN&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--provirus-off&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-b BASELINE&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--max-gap MAX_GAP&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--max-frac MAX_FRAC&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--provirus-minlen PROVIRUS_MINLEN&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--provirus-minfrac PROVIRUS_MINFRAC&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-c MIN_SCORE&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-k MINLEN_KEEP&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-n BATCH_SIZE&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-w NUM_WORKERS&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--cpu&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--cpu-threads CPU_THREADS&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--gpu-device GPU_DEVICE&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;A hybrid language representation learning framework &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; identifying viruses from human gut metagenomes.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;optional arguments:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -h, --help: 显示帮助信息
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -i INPUT_FILE, --input-file INPUT_FILE: 输入fasta格式文件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -o OUTPUT_DIR, --output-dir OUTPUT_DIR: 输出目录
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --label LABEL: 输出文件名前缀
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -m MODEL, --model MODEL: 模型路径
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --use-amp: 使用自动混合精度以提高计算效率
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --conservative: 使用保守设置
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -l MINLEN, --minlen MINLEN: 预测序列的最小长度
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --provirus-off: 跳过迭代段扩展程序
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -b BASELINE, --baseline BASELINE: 启动段扩展的基准得分
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --max-gap MAX_GAP: 合并相邻扩展区域的最大距离
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --max-frac MAX_FRAC: 合并相邻区域的最大比率
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --provirus-minlen PROVIRUS_MINLEN: 被认为是前病毒的区域的最小长度
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --provirus-minfrac PROVIRUS_MINFRAC: 被认为是前病毒的区域长度的最小比率
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -c MIN_SCORE, --min-score MIN_SCORE: 最终保留的病毒候选序列的最低得分
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -k MINLEN_KEEP, --minlen-keep MINLEN_KEEP: 最终保留的病毒命中的最小长度
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -n BATCH_SIZE, --batch-size BATCH_SIZE: 一次评分的1kb段数
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -w NUM_WORKERS, --num-workers NUM_WORKERS: 用于数据加载的子进程数
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --cpu: 在CPU上运行VirRep
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --cpu-threads CPU_THREADS: 在CPU上运行VirRep的线程数
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --gpu-device GPU_DEVICE: 运行VirRep的GPU设备编号
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>从宏基因组中鉴定病毒序列</title>
        <link>https://jb-cao.github.io/Cao-blog/p/virus/</link>
        <pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate>
        
        <guid>https://jb-cao.github.io/Cao-blog/p/virus/</guid>
        <description>&lt;img src="https://jb-cao.github.io/Cao-blog/p/virus/images/genomad.png" alt="Featured image of post 从宏基因组中鉴定病毒序列" /&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;在环境微生物学和生态学研究中，宏基因组学（Metagenomics）技术的应用已经彻底改变了我们对微生物群落的理解。宏基因组学通过对环境样本中的全部遗传物质进行测序和分析，可以全面揭示微生物群落的组成、功能和相互作用。然而，在这些复杂的微生物群落中，病毒序列的鉴定仍然是一个巨大的挑战。&lt;/p&gt;
&lt;p&gt;病毒在生态系统中扮演着关键角色，它们通过感染宿主微生物调控微生物群落的动态和功能。病毒的存在和活动对宿主的进化、生物地球化学循环以及环境健康有着深远的影响。尽管病毒在生态系统中至关重要，但由于它们的基因组多样性高、没有通用的保守基因、以及基因组片段化严重，传统的宏基因组分析方法常常难以有效地识别和解析病毒序列。&lt;/p&gt;
&lt;p&gt;为了克服这些挑战，研究人员开发了一系列专门的工具和方法，用于从宏基因组数据中提取和鉴定病毒序列。这些方法结合了序列比对、结构特征分析和机器学习等技术，显著提高了病毒序列的鉴定效率和准确性。通过这些方法，科学家们不仅能够更全面地了解环境病毒的多样性，还能揭示病毒与其宿主之间的复杂关系，为生态学、进化生物学和公共卫生等领域的研究提供重要的参考。&lt;/p&gt;
&lt;p&gt;本文我们将介绍从宏基因组数据中鉴定病毒序列的主要方法和工具。&lt;/p&gt;
&lt;p&gt;从宏基因组数据中鉴定病毒序列的主要方法可以分为几类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;序列比对方法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;鉴定病毒序列的最直接方法。这些方法依赖于将宏基因组数据中的序列与已知病毒数据库进行比对，以找到相似的序列。常用的序列比对工具和数据库包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;BLAST&lt;/strong&gt;（Basic Local Alignment Search Tool）：这是最常用的序列比对工具，可以用于将宏基因组数据与病毒数据库进行比对。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Diamond&lt;/strong&gt;：比BLAST更快速的序列比对工具，适用于大规模宏基因组数据的处理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NCBI RefSeq Viral Database&lt;/strong&gt;：一个广泛使用的病毒序列数据库。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;特征分析方法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过分析序列的特定特征来鉴定病毒序列。常用的特征分析包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;k-mer 分析&lt;/strong&gt;：分析序列中固定长度的子序列（k-mers）的频率分布，用于区分病毒和宿主序列。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GC含量分析&lt;/strong&gt;：病毒和宿主的GC含量往往有所不同，通过分析GC含量可以辅助鉴定病毒序列。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;序列深度分析&lt;/strong&gt;：病毒序列在宏基因组数据中的覆盖深度可能与宿主序列不同，通过比较覆盖深度可以辅助识别病毒序列。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;机器学习方法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;机器学习方法通过训练模型来自动鉴定病毒序列，如&lt;strong&gt;支持向量机（SVM）&lt;/strong&gt;，&lt;strong&gt;随机森林&lt;/strong&gt;， &lt;strong&gt;深度学习&lt;/strong&gt;等。&lt;/p&gt;
&lt;h2 id=&#34;tools&#34;&gt;Tools&lt;/h2&gt;
&lt;p&gt;目前，有多种专门用于病毒鉴定的工具，每个工具都有其独特的优势和适用场景。以下是一些常用的病毒鉴定工具的简要介绍：&lt;/p&gt;
&lt;h3 id=&#34;genomad&#34;&gt;geNomad&lt;/h3&gt;
&lt;img src=&#34;images/genomad.png&#34; title=&#34;&#34;/&gt;
&lt;p&gt;geNomad 是一种用于识别和分类病毒序列的工具，2023年9月发表在Nature Biotechnology上[1]。它结合了序列比对和机器学习方法，能够高效地从宏基因组数据中提取病毒序列。geNomad 擅长处理复杂和高噪声的环境数据，适用于多样化的宏基因组样本。geNomad运行速度快，可对大型数据集进行分析。&lt;/p&gt;
&lt;p&gt;软件：&lt;a class=&#34;link&#34; href=&#34;https://github.com/apcamargo/genomad&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/apcamargo/genomad&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;教程：&lt;a class=&#34;link&#34; href=&#34;https://portal.nersc.gov/genomad/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://portal.nersc.gov/genomad/&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;installation&#34;&gt;Installation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;安装软件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以使用通用包管理器（mamba 或 conda）或特定于 Python 的包管理器（pip）在计算机中安装 geNomad。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# mamba&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mamba create -n genomad -c conda-forge -c bioconda genomad
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mamba activate genomad
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# conda&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda create -n genomad -c conda-forge -c bioconda genomad
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda activate genomad
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# pip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install genomad
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Conda 和 Mamba 将安装 geNomad 所需的 Python 依赖项和第三方软件。如果使用 pip 或 pipx 安装 geNomad，要将 MMseqs2 和 ARAGORN 添加到环境变量里。
MMseqs2 和 ARAGORN是我常用的软件，所以我直接用pip安装，注意MMseqs2最好是最新版，不然可能有点问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载数据库
geNomad 依赖于一个包含用于对序列进行分类的标记的概况、它们的分类信息、它们的功能注释等的数据库：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以通过软件下载：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;genomad download-database .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;也可以自行下载并解压（我试了这个快），网址：https://portal.nersc.gov/genomad/&lt;strong&gt;data&lt;/strong&gt;/genomad_db_v1.7.tar.gz ，我放在了~/db/genomad_db/genomad_db目录，解压后大概1.4G。&lt;/p&gt;
&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;
&lt;p&gt;geNomad通过顺序执行一系列模块来工作（见下列Pipeline），但也提供了一个方便的一键式命令，可以一次性执行整个流程。&lt;/p&gt;
&lt;p&gt;示例：使用肺炎克雷伯氏菌基因组（GCF_009025895.1）作为输入。geNomad适用于分离基因组、宏基因组和宏转录组中的病毒序列。&lt;/p&gt;
&lt;p&gt;执行geNomad的命令结构如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;genomad end-to-end &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;OPTIONS&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; INPUT OUTPUT DATABASE
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;所以，为了运行完整的geNomad流程（end-to-end命令），我们将核苷酸FASTA文件（GCF_009025895.1.fna.gz）和数据库（genomad_db）作为输入，执行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#下载genome&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/009/025/895/GCF_009025895.1_ASM902589v1/GCF_009025895.1_ASM902589v1_genomic.fna.gz -O GCF_009025895.1.fna.gz
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;genomad end-to-end --cleanup --splits &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; GCF_009025895.1.fna.gz genomad_output ~/db/genomad_db/genomad_db
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;注意，输入的FASTA文件是压缩的。geNomad支持.gz、.bz2或.xz格式的压缩文件。结果将写入&lt;code&gt;genomad_output&lt;/code&gt;目录中，&lt;code&gt;--splits 8&lt;/code&gt;参数：将搜索分成8个块以节省内存空间。如果你在大服务器上运行geNomad，可能不需要分割搜索，这样可以提高执行速度。&lt;code&gt;--cleanup&lt;/code&gt;会强制geNomad删除在执行过程中生成的中间文件。&lt;/p&gt;
&lt;p&gt;我试了一下，不带&lt;code&gt;--splits 8&lt;/code&gt;参数时，内存消耗20G，耗时300s。如果想要进一步加快速度，可以考虑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用合适的 &lt;code&gt;--threads&lt;/code&gt;，默认是64，但一般可能没有这么多。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;--disable-nn-classification&lt;/code&gt; 选项禁用基于神经网络的分类，这也将禁用分数聚合并强制 geNomad 仅依赖基于标记的分类器。可能对 geNomad 的分类性能产生负面影响。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;--sensitivity&lt;/code&gt; 参数降低 MMseqs2 搜索的灵敏度，该搜索将标记分配给基因。这将使注释模块更快，但也会减少分配给标记的基因数量。可能对 geNomad 的分类性能产生负面影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;控制分类严格性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，geNomad应用一系列分类后过滤器以移除可能的假阳性。例如，序列需要具有至少0.7的质粒或病毒得分，且长度小于2500 bp的序列需要编码至少一个标志基因。如果你想禁用这些过滤器，可以在命令中添加&lt;code&gt;--relaxed&lt;/code&gt;标志。相反，如果你希望分类更加保守，可以使用&lt;code&gt;--conservative&lt;/code&gt;标志。这将使分类后过滤器更加严格，防止没有强有力支持的序列被分类为质粒或病毒。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;genomad_output
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── GCF_009025895.1_aggregated_classification
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── GCF_009025895.1_aggregated_classification.log
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── GCF_009025895.1_annotate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── GCF_009025895.1_annotate.log
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── GCF_009025895.1_find_proviruses
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── GCF_009025895.1_find_proviruses.log
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── GCF_009025895.1_marker_classification
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── GCF_009025895.1_marker_classification.log
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── GCF_009025895.1_nn_classification
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── GCF_009025895.1_nn_classification.log
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── GCF_009025895.1_summary
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;╰── GCF_009025895.1_summary.log
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;prefix&gt;_summary 目录包含总结整个管道生成的结果的文件。如果只想要输入中识别出的质粒和病毒的列表，这个是最关键的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;genomad_output
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;╰── GCF_009025895.1_summary
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ├── GCF_009025895.1_plasmid.fna
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ├── GCF_009025895.1_plasmid_genes.tsv
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ├── GCF_009025895.1_plasmid_proteins.faa
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ├── GCF_009025895.1_plasmid_summary.tsv
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ├── GCF_009025895.1_summary.json
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ├── GCF_009025895.1_virus.fna
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ├── GCF_009025895.1_virus_genes.tsv
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ├── GCF_009025895.1_virus_proteins.faa
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ╰── GCF_009025895.1_virus_summary.tsv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;GCF_009025895.1_virus_summary.tsv:&lt;/p&gt;
&lt;p&gt;该表格文件列出了geNomad在输入数据中找到的所有病毒，并提供了一些方便的信息。每列包含的内容如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;seq_name&lt;/strong&gt;：输入FASTA文件中序列的标识符。内源病毒会有以下命名格式：&lt;code&gt;&amp;lt;sequence_identifier&amp;gt;|provirus_&amp;lt;start_coordinate&amp;gt;_&amp;lt;end_coordinate&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;length&lt;/strong&gt;：序列（或内源病毒）的长度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;topology&lt;/strong&gt;：病毒序列的拓扑结构。可能的值包括：无末端重复（No terminal repeats）、直接末端重复（DTR）、倒置末端重复（ITR）或内源病毒（Provirus）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;coordinates&lt;/strong&gt;：内源病毒在宿主序列中的1索引坐标。对于未预测为内源病毒的病毒，此值为NA。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;n_genes&lt;/strong&gt;：序列中编码的基因数量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;genetic_code&lt;/strong&gt;：预测的遗传密码。可能的值包括：11（细菌和古菌的标准密码）、4（重新编码的TGA终止密码）或15（重新编码的TAG终止密码）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;virus_score&lt;/strong&gt;：geNomad对序列是病毒的置信度测量。得分接近1.0的序列更有可能是病毒。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fdr&lt;/strong&gt;：分类的估计假发现率（FDR），即该行之前序列中的预期假阳性比例。估计FDR需要得分校准，默认关闭，因此本例中此列将仅包含NA值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;n_hallmarks&lt;/strong&gt;：匹配geNomad标志基因的基因数量。标志基因与病毒功能相关，其存在强烈表明该序列确实是病毒。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;marker_enrichment&lt;/strong&gt;：表示序列中病毒标志基因总富集的得分。随着序列中病毒标志基因数量的增加，该值会增加，具有多个标志基因的序列得分较高。染色体和质粒标志基因会降低得分。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;taxonomy&lt;/strong&gt;：病毒基因组的分类。分类依据ICTV的VMR第19号内容。病毒可以分类到科级，但不能分类到具体的属或种。分类以固定数量的字段（对应分类等级）表示，用分号分隔，空字段留空。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，在执行过程中，geNomad 使用染色体、质粒和病毒特异性标记数据库对输入序列编码的基因进行注释。 &lt;prefix&gt;_virus_genes.tsv 文件总结了已识别病毒编码的基因的注释。&lt;/p&gt;
&lt;p&gt;GCF_009025895.1_virus_genes.tsv，文件中的列如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;gene&lt;/strong&gt;：基因的标识符（&amp;lt;sequence_name&amp;gt;_&amp;lt;gene_number&amp;gt;）。通常基因编号从1开始（序列中的第一个基因）。然而，由于内源噬菌体整合在宿主染色体中间，基因编号可能会因其在染色体中的位置而不同。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;start&lt;/strong&gt;：基因的起始坐标（1索引）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;end&lt;/strong&gt;：基因的终止坐标（1索引）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;length&lt;/strong&gt;：基因位点的长度（以碱基对为单位）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;strand&lt;/strong&gt;：编码基因的链。可以是1（正链）或-1（负链）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gc_content&lt;/strong&gt;：基因位点的GC含量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;genetic_code&lt;/strong&gt;：预测的遗传密码（详见摘要文件解释）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rbs_motif&lt;/strong&gt;：检测到的核糖体结合位点的基序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;marker&lt;/strong&gt;：最佳匹配的geNomad标记。如果该基因不匹配任何标记，则值为NA。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;evalue&lt;/strong&gt;：基因编码的蛋白质与最佳匹配的geNomad标记之间比对的E值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bitscore&lt;/strong&gt;：基因编码的蛋白质与最佳匹配的geNomad标记之间比对的Bitscore值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;uscg&lt;/strong&gt;：分配给该基因的标记是否对应于通用单拷贝基因（UCSG，如BUSCO v5中定义）。这些基因预期在染色体中发现，在质粒和病毒中很少见。可以是1（基因是USCG）或0（基因不是USCG）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;plasmid_hallmark&lt;/strong&gt;：分配给该基因的标记是否代表质粒标志基因。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;virus_hallmark&lt;/strong&gt;：分配给该基因的标记是否代表病毒标志基因。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;taxid&lt;/strong&gt;：分配给该基因的标记的分类标识符（此字段主要用于geNomad内部）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;taxname&lt;/strong&gt;：与分配的geNomad标记相关的分类名称。在此示例中，可以看到所有注释的蛋白质都具有Caudoviricetes的特征（这也是内源病毒被分配到该类的原因）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;annotation_conjscan&lt;/strong&gt;：如果匹配基因的标记是与接合作用相关的基因（如CONJscan中定义），此字段将显示分配给标记的CONJscan访问号。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;annotation_amr&lt;/strong&gt;：如果匹配基因的标记被注释为具有抗微生物耐药性（AMR）功能（如NCBIfam-AMRFinder中定义），此字段将显示分配给标记的NCBIfam访问号。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;annotation_accessions&lt;/strong&gt;：一些geNomad标记具有功能注释。此列告诉您哪些Pfam、TIGRFAM、COG和KEGG条目分配给了标记。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;annotation_description&lt;/strong&gt;：描述分配给标记功能的文本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;质粒鉴定相关的数据可以在 &lt;prefix&gt;_plasmid_summary.tsv、&lt;prefix&gt;_genes.tsv、&lt;prefix&gt;_plasmid.fna 和 &lt;prefix&gt;&lt;em&gt;plasmid&lt;/em&gt; Proteins.faa 文件中找到。&lt;/p&gt;
&lt;h4 id=&#34;pipeline&#34;&gt;Pipeline&lt;/h4&gt;
&lt;p&gt;geNomad的具体工作流程如下：&lt;/p&gt;
&lt;img src=&#34;images/genomad_pipe.png&#34; title=&#34;&#34;/&gt;
&lt;p&gt;对于大多数情况，使用 &lt;code&gt;genomad end-to-end&lt;/code&gt; 就足够了。然而，了解执行完整管道时涉及的具体流程非常重要。
这里对每个模块的功能进行解释，了解这些功能将帮助掌握 geNomad 如何处理输入序列以识别质粒和病毒。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;annotate&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;annotate&lt;/code&gt;模块有两个主要功能：使用 Pyrodigal-gv 预测输入序列中的基因，并使用 MMseqs2 将这些预测基因分配给来自 227,897 个染色体、质粒或病毒特有图谱的数据集中的标记蛋白家族。该标记数据集提供了全面的元数据，可以帮助下游结果的解释。这包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 Pfam、COG、TIGRFAM 和 KEGG Orthology 种质进行功能注释。&lt;/li&gt;
&lt;li&gt;标志基因，涉及关键的质粒或病毒功能。&lt;/li&gt;
&lt;li&gt;接合基因，通过CONJscan加入。&lt;/li&gt;
&lt;li&gt;抗菌素抗性基因，通过 AMRFinder获得。&lt;/li&gt;
&lt;li&gt;使用 BUSCO 鉴定的通用单拷贝基因 (USCG) 通常存在于染色体中，但在质粒和病毒中很少见。&lt;/li&gt;
&lt;li&gt;通过使用 ICTV 的 VMR 编号 19 谱系进行病毒分类。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注释模块生成两个主要输出：输入序列的分类分配（可以在此处找到 geNomad 如何将序列分配给病毒分类群的说明）和基因级注释（如快速入门示例中所示）。这些输出被 &lt;code&gt;find-proviruses&lt;/code&gt;, &lt;code&gt;marker-classification&lt;/code&gt;, &lt;code&gt;summary&lt;/code&gt;使用。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;find-proviruses&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;find-proviruses&lt;/code&gt; 模块旨在识别宿主序列内的原病毒区域。
为了实现这一目标，它使用条件随机场 (CRF) 模型，该模型采用注释模块生成的基因注释，并划分富含病毒特异性标记的区域，周围环绕着宿主特异性标记。
为了细化原病毒的边界，geNomad 利用了噬菌体通常在 tRNA 旁边整合以及整合酶通常位于整合噬菌体边缘的事实。
这是通过延伸边缘直到到达邻近的 tRNA（用 ARAGORN 识别）和/或整合酶（用 MMseqs2 识别）来实现的。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;marker-classification&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;geNomad 中的&lt;code&gt;marker-classification&lt;/code&gt;模块旨在根据标记内容将序列分类为染色体、质粒或病毒。为了实现这一目标，该模块获取基因注释并计算一组数字特征，这些特征描述了需要分类的序列的基因结构和标记内容。这些特征包括基因密度以及染色体、质粒和病毒标记的频率。&lt;/p&gt;
&lt;p&gt;然后，&lt;code&gt;marker-classification&lt;/code&gt;将这些特征提供给使用 XGBoost 训练的树集成分类算法，该算法为每个序列生成三个分数。这些分数代表模型对该序列代表染色体、质粒或病毒的置信度。&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;nn-classification&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;nn-classification&lt;/code&gt;模块还将输入序列分类为染色体、质粒或病毒，类似于标记分类模块。然而，与后者不同的是，它不依赖于标记信息。相反，它使用神经网络直接处理核苷酸序列。核苷酸序列首先被编码成数字矩阵，然后输入 IGLOO 神经网络。该网络能够检测区分染色体、质粒和病毒的序列特征。最后，该模块生成分类的置信度分数。&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;aggregated-classification&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;aggregated-classification&lt;/code&gt;模块结合了&lt;code&gt;marker-classification&lt;/code&gt;和&lt;code&gt;nn-classification&lt;/code&gt;的输出，以产生一组利用两个分类器的优势的分数。为了实现这一目标，它采用了一种注意力机制，对每个分类器的贡献进行加权，使得标记分类的贡献与分配给标记的基因的比例成比例地增加。&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;score-calibration&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;标记分类、神经网络分类和聚合分类生成的分数表明这些模型对其预测的置信度，值越高则表明置信度越高。然而，这些值并不等于实际概率。例如，未校准病毒得分为 0.87 的序列没有 87% 的可能性是病毒。
&lt;code&gt;score-calibration&lt;/code&gt;是一个可选模块，它将先前模块产生的原始分数转换为估计概率。这确保了校准病毒得分为 0.87 的序列成为病毒的概率接近 87%。要启用分数校准使用 &lt;code&gt;--enable-score-calibration&lt;/code&gt; 参数。&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;summary&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;summary&lt;/code&gt;模块具有三个主要功能：(1) 根据各种标准过滤序列，为用户提供最可靠的预测（在此处阅读有关过滤过程的更多信息），
(2) 总结所有先前模块为已识别质粒生成的数据和(3) 编写包含已识别质粒和病毒的核苷酸和蛋白质序列的 FASTA 文件，并附有基因注释文件。&lt;/p&gt;
&lt;h3 id=&#34;deepvirfinder&#34;&gt;DeepVirFinder&lt;/h3&gt;
&lt;img src=&#34;images/deepvirfinder.png&#34; title=&#34;&#34;/&gt;
&lt;p&gt;DeepVirFinder 使用深度学习方法预测病毒序列。该方法对短病毒序列具有良好的预测准确性，因此可用于预测宏基因组数据中的序列，于2020年发表在quantitative biology上[2]。
相比基于k-mer的方法VirFinder，DeepVirFinder使用卷积神经网络（CNN）显著提高了预测准确性。CNN可以自动从病毒和原核生物序列中学习基因组模式，并基于所学的基因组模式构建预测模型。学到的模式以大小为4×k的权重矩阵形式表示，类似于位置权重矩阵（PWM）。这种灵活的CNN模型在病毒序列预测问题上优于k-mer模型。&lt;/p&gt;
&lt;p&gt;软件：&lt;a class=&#34;link&#34; href=&#34;https://github.com/jessieren/DeepVirFinder&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/jessieren/DeepVirFinder&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;installation-1&#34;&gt;Installation&lt;/h4&gt;
&lt;p&gt;DeepVirFinder 需要Python 3.6，并安装numpy、theano、keras、scikit-learn和Biopython等包。推荐使用Miniconda安装所有依赖项。&lt;/p&gt;
&lt;p&gt;我已经有了python3.5和python3.7两个做深度学习的环境，本来想着偷懒直接用，但是发现都不支持，所以只能再创建一个python3.6的环境：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda create --name dvf &lt;span class=&#34;nv&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;3.6 numpy &lt;span class=&#34;nv&#34;&gt;theano&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1.0.3 &lt;span class=&#34;nv&#34;&gt;keras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;2.2.4 scikit-learn Biopython h5py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; activate dvf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;下载软件包：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/jessieren/DeepVirFinder
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; DeepVirFinder
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python dvf.py -h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 可以添加环境变量，方便调用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chmod +x dvf.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;1d&amp;#39;&lt;/span&gt; dvf.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;1i #!/miniconda3/envs/dvf/bin/python&amp;#39;&lt;/span&gt; dvf.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ln -s ./dvf.py ~/miniconda3/envs/dvf/bin/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ln -s ~/biosoft/DeepVirFinder/models ~/miniconda3/envs/dvf/bin/models
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;dvf.py -h
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;example-1&#34;&gt;Example&lt;/h4&gt;
&lt;p&gt;DeepVirFinder的输入是包含要预测序列的fasta文件，输出是包含每个输入序列的预测得分和p值的.txt文件。更高的得分或更低的p值表明更高的病毒序列可能性。&lt;/p&gt;
&lt;p&gt;默认情况下，输出文件与输入文件在同一目录。用户也可以通过[-o]选项指定输出目录。[-l]选项设置最小序列长度阈值，低于此阈值的序列将不会被预测。该程序支持并行计算，通过[-c]指定使用的线程数。[-m]选项指定模型目录，默认模型目录为./models。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python dvf.py [-i INPUT_FA] [-o OUTPUT_DIR] [-l CUTOFF_LEN] [-c CORE_NUM]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -h, --help            显示此帮助信息并退出
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -i INPUT_FA, --in=INPUT_FA   输入fasta文件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -m MODDIR, --mod=MODDIR      模型目录（默认./models）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -o OUTPUT_DIR, --out=OUTPUT_DIR 输出目录
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -l CUTOFF_LEN, --len=CUTOFF_LEN  仅预测长度&amp;gt;= L bp的序列（默认1）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -c CORE_NUM, --core=CORE_NUM   并行核心数（默认1）
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们来试试，预测test文件中的crAssphage基因组：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python dvf.py -i ./test/crAssphage.fa -o ./test/ -l &lt;span class=&#34;m&#34;&gt;300&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;测试没问题：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ python dvf.py -i ./test/crAssphage.fa -o ./test/ -l &lt;span class=&#34;m&#34;&gt;300&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;WARNING &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;theano.configdefaults&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: install mkl with &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;conda install mkl-service&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;: No module named &lt;span class=&#34;s1&#34;&gt;&amp;#39;mkl&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Using Theano backend.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1. Loading Models.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   model directory /share/home/jianglab/pengchen/biosoft/DeepVirFinder/models
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2. Encoding and Predicting Sequences.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   processing line &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   processing line &lt;span class=&#34;m&#34;&gt;1389&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;3. Done. Thank you &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; using DeepVirFinder.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   output in ./test/crAssphage.fa_gt300bp_dvfpred.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;crAssphage.fa_gt300bp_dvfpred.txt，输出非常简单，4列:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;name	len	score	pvalue
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gi|674660337|ref|NC_024711.1| Uncultured phage crAssphage, complete genome	97065	0.9978806972503662	0.004702016768638115
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如需计算q值（假发现率），可以使用R包“qvalue”进行p值矫正。&lt;/p&gt;
&lt;p&gt;关于阈值：deepvirfinder官方推荐q-value&amp;lt;0.01的序列认定为病毒序列，也有文献（Biogeographic patterns and drivers of soil viromes）采用 score ≥0.7 and P &amp;lt; 0.05来界定病毒序列，没有具体标准。&lt;/p&gt;
&lt;p&gt;如果要自己构建数据库训练模型，可以参考软件主页。&lt;/p&gt;
&lt;h3 id=&#34;virsorter2&#34;&gt;VirSorter2&lt;/h3&gt;
&lt;img src=&#34;images/virsorter2.webp&#34; title=&#34;&#34;/&gt;
&lt;p&gt;VirSorter2 是 VirSorter 的升级版，于2021年发表在Microbiome上[3]。&lt;/p&gt;
&lt;p&gt;VirSorter2 采用多分类器、专家指导的方法来检测不同的 DNA 和 RNA 病毒基因组。它对之前的版本进行了重大更新：&lt;/p&gt;
&lt;p&gt;包含更多病毒，包括双链 DNA 噬菌体、单链 DNA 病毒、RNA 病毒、NCLDV（核细胞病毒）、拉维病毒科（病毒噬菌体）；
应用机器学习使用基因组特征（包括结构/功能/分类注释和病毒标志基因）来估计病毒性；
使用来自宏基因组或其他来源的高质量病毒基因组进行训练。&lt;/p&gt;
&lt;p&gt;软件：&lt;a class=&#34;link&#34; href=&#34;https://github.com/jiarong/VirSorter2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/jiarong/VirSorter2&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;installation-2&#34;&gt;Installation&lt;/h4&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mamba create -n vs2 -c conda-forge -c bioconda &lt;span class=&#34;nv&#34;&gt;virsorter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mamba activate vs2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;下载数据库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#以防之前尝试失败；&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#删除-d指定的整个目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rm -rf ./virsorter_db
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# run setup&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;virsorter setup -d ./virsorter_db -j &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#若下载失败也可手动下载，https://osf.io/v46sc/download&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#解压后将路径传给--db-dir&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tar -xzf db.tgz
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mv db virsorter_db
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;virsorter config --init-source --db-dir&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./virsorter_db
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;example-2&#34;&gt;Example&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wget -O test.fa https://raw.githubusercontent.com/jiarong/VirSorter2/master/test/8seq.fa
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;virsorter run -w test.out -i test.fa --min-length &lt;span class=&#34;m&#34;&gt;1500&lt;/span&gt; -j &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; all
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#基于不同得分（min-score）重新快速运行程序（只运行classify步骤），新文件添加后缀（label）为rerun&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;virsorter run -w test.out -i test.fa --include-groups &lt;span class=&#34;s2&#34;&gt;&amp;#34;dsDNAphage,ssDNA&amp;#34;&lt;/span&gt; -j &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; --min-score 0.9 --label rerun classify
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#增加hmmscan线程数提高运行速度&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;virsorter config --set &lt;span class=&#34;nv&#34;&gt;HMMSEARCH_THREADS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;由于 VirSorter2 使用大型 HMM 数据库，这个小数据集需要几分钟才能完成。在输出目录（test.out）中，三个文件很有用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Final-viral-combined.fa：确定的病毒序列&lt;/li&gt;
&lt;li&gt;Final-viral-score.tsv：包含各组病毒序列得分的表格以及一些其他关键特征，可用于进一步过滤&lt;/li&gt;
&lt;li&gt;Final-viral-boundary.tsv：包含边界信息的表；这是一个中间文件，1）与其他两个文件相比可能有额外的记录，应被忽略； 2) 不包括带有 &amp;lt; 2 个基因但具有 &amp;gt;= 1 个标志基因的病毒序列； 3) group和trim_pr是中间结果，可能与final-viral-score.tsv中的max_group和max_score分别不匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果要自己构建数据库训练模型，可以参考软件主页。&lt;/p&gt;
&lt;h3 id=&#34;vibrant&#34;&gt;VIBRANT&lt;/h3&gt;
&lt;p&gt;VIBRANT 是一个功能强大的工具，用于自动恢复和注释细菌和古细菌病毒、确定基因组完整性以及从宏基因组组装中表征病毒群落，于2020年发表在Microbiome上[4]。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用蛋白质注释签名的神经网络机器学习&lt;/li&gt;
&lt;li&gt;指定新颖的“v-score”来确定所有注释的病毒性质&lt;/li&gt;
&lt;li&gt;确定基因组完整性&lt;/li&gt;
&lt;li&gt;通过代谢分析表征病毒群落功能&lt;/li&gt;
&lt;li&gt;鉴定辅助代谢基因 (AMG)&lt;/li&gt;
&lt;li&gt;从宿主支架上切除整合的病毒基因组&lt;/li&gt;
&lt;li&gt;在不同的环境中表现良好&lt;/li&gt;
&lt;li&gt;恢复新颖且丰富的病毒基因组&lt;/li&gt;
&lt;li&gt;专为 dsDNA、ssDNA 和 RNA 病毒而设计&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;VIBRANT 使用三个数据库来识别病毒并表征病毒组代谢潜力：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KEGG（三月发布）：https://www.genome.jp/kegg/（FTP：ftp://ftp.genome.jp/pub/db/kofam/archives/2019-03-20/）&lt;/li&gt;
&lt;li&gt;Pfam (v32)：https://pfam.xfam.org（FTP：ftp://ftp.ebi.ac.uk/pub/databases/Pfam/releases/Pfam32.0/）&lt;/li&gt;
&lt;li&gt;VOG（版本 94）：http://vogdb.org/（FTP：http://fileshare.csb.univie.ac.at/vog/vog94/）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装和示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;conda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vibrant&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.19&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scikit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;learn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.21&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prodigal&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hmmer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;biopython&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;matplotlib&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seaborn&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;conda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bioconda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vibrant&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;download&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sh&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;VIBRANT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#下载数据库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;~/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;miniconda3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;envs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vibrant&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;VIBRANT_run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;~/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;miniconda3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;envs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vibrant&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;VIBRANT_run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;py&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;contig&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fa&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;180&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;folder&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out_dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;VIBRANT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;databases&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;VIBRANT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;others&#34;&gt;Others&lt;/h3&gt;
&lt;p&gt;其他还有一些类似的工具，但我没有一一安装测试，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PPR-Meta 使用机器学习方法来预测病毒和原核生物的序列。通过训练支持向量机（SVM）模型，PPR-Meta 能够高效地区分病毒和非病毒序列。该工具适用于大规模宏基因组数据的快速处理和分析。&lt;/li&gt;
&lt;li&gt;viralVerify 是一个专门用于病毒序列验证的工具。它结合了多种分析方法，包括序列比对、特征分析和机器学习，来验证和注释病毒序列。viralVerify 提供了详细的报告，包括病毒序列的覆盖度、基因组组成和功能注释。&lt;/li&gt;
&lt;li&gt;MetaPhinder 使用序列比对方法，通过与病毒数据库比对，识别宏基因组中的病毒序列。该工具适用于快速识别已知病毒序列，并能提供详细的分类信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近还看到了一些比较新的工具文章可以帮助病毒分析，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;COBRA（Contig Overlap Based Re-Assembly）是一种生物信息学工具[5]，可从短双端读长的宏基因组中组装出更高质量的病毒基因组。 COBRA 是用 Python 编写的。迄今为止，COBRA 仅在来自 metaSPAdes、IDBA_UD 和 MEGAHIT 的组装contigs和支架上进行了测试。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bio-transformers 证明蛋白质语言模型可以捕获原核病毒蛋白质功能[6]，从而使病毒序列空间的新部分能够被分配具有生物学意义的标签。蛋白质语言模型增强了病毒蛋白质的远程同源性检测，作为现有方法的有用补充。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;quality-assessment&#34;&gt;Quality assessment&lt;/h2&gt;
&lt;h3 id=&#34;checkv&#34;&gt;CheckV&lt;/h3&gt;
&lt;p&gt;CheckV 是一个完全自动化的命令行管道，用于评估单contig病毒基因组的质量，包括识别集成原病毒的宿主污染、估计基因组片段的完整性以及识别封闭基因组，于2017年发表在Nature Biotechnology[7]。&lt;/p&gt;
&lt;p&gt;软件：&lt;a class=&#34;link&#34; href=&#34;https://bitbucket.org/berkeleylab/checkv/src/master/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bitbucket.org/berkeleylab/checkv/src/master/&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;installation-3&#34;&gt;Installation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;安装软件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以使用通用包管理器（mamba 或 conda）或特定于 Python 的包管理器（pip）在计算机中安装 checkv。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# mamba&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mamba install -c conda-forge -c bioconda &lt;span class=&#34;nv&#34;&gt;checkv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1.0.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# conda&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda install -c conda-forge -c bioconda &lt;span class=&#34;nv&#34;&gt;checkv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1.0.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# pip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install checkv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;因为跟上面讲的genomad的依赖项基本一致，所以我直接用pip安装在同一环境中就可以用了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ checkv end_to_end -h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;usage: checkv end_to_end &amp;lt;input&amp;gt; &amp;lt;output&amp;gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;options&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;positional arguments:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  input         以FASTA格式输入核苷酸序列（支持.gz，.bz2和.xz文件）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  output        输出目录
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;optional arguments:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -h, --help    显示此帮助消息并退出
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -d PATH       引用数据库路径。默认情况下，使用 CHECKVDB 环境变量【添加后可不写】
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --remove_tmp  从输出目录中删除中间文件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -t INT        用于Prodigal和DIAMOND的线程数
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --restart     覆盖现有的中间文件。默认情况下，CheckV 在程序中断的地方继续
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --quiet       禁止记录消息
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;programs:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    end_to_end          运行完整的管道以估计完整性，污染并识别封闭的基因组
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    contamination       识别并消除集成前病毒上的宿主污染
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    completeness        估计基因组片段的完整性
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    complete_genomes    根据末端重复序列和侧翼宿主区域识别完整基因组
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    quality_summary     跨模块汇总结果
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    download_database   下载最新版本的CheckV数据库
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;下载数据库
geNomad 依赖于一个包含用于对序列进行分类的标记的概况、它们的分类信息、它们的功能注释等的数据库：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以通过软件下载：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;checkv download_database ./
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;也可以自行下载并解压（我试了这个快），解压后大概5.4G，我放在~/db/genomad_db/checkv-db-v1.0。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#数据库下载（手动）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wget https://portal.nersc.gov/CheckV/checkv-db-v1.0.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tar zxvf checkv-db-v1.0.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;example-3&#34;&gt;Example&lt;/h4&gt;
&lt;p&gt;我们使用上面genomad运行得到的GCF_009025895.1_ASM902589v1_genomic_virus.fna文件来测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;checkv end_to_end GCF_009025895.1_ASM902589v1_genomic_virus.fna checkv_out &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -t &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; -d ~/db/genomad_db/checkv-db-v1.0 --remove_tmp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CheckV v1.0.3: contamination
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;1/8&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Reading database info...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;2/8&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Reading genome info...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;3/8&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Skipping gene calling...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;4/8&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Reading gene info...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;5/8&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Skipping hmmsearch...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;6/8&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Annotating genes...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;7/8&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Identifying host regions...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;8/8&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Writing results...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Run time: 0.77 seconds
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peak mem: 0.08 GB
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CheckV v1.0.3: completeness
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;1/8&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Skipping gene calling...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;2/8&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Initializing queries and database...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;3/8&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Running DIAMOND blastp search...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;4/8&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Computing AAI...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;5/8&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Running AAI based completeness estimation...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;6/8&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Running HMM based completeness estimation...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;7/8&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Determining genome copy number...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;8/8&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Writing results...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Run time: 9.69 seconds
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peak mem: 1.12 GB
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CheckV v1.0.3: complete_genomes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;1/7&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Reading input sequences...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;2/7&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Finding &lt;span class=&#34;nb&#34;&gt;complete&lt;/span&gt; proviruses...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;3/7&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Finding direct/inverted terminal repeats...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;4/7&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Filtering terminal repeats...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;5/7&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Checking genome &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; completeness...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;6/7&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Checking genome &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; large duplications...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;7/7&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Writing results...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Run time: 0.02 seconds
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peak mem: 1.12 GB
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CheckV v1.0.3: quality_summary
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;1/6&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Reading input sequences...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;2/6&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Reading results from contamination module...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;3/6&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Reading results from completeness module...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;4/6&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Reading results from &lt;span class=&#34;nb&#34;&gt;complete&lt;/span&gt; genomes module...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;5/6&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Classifying contigs into quality tiers...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;6/6&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Writing results...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Run time: 2.42 seconds
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peak mem: 1.12 GB
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;quality_summary.tsv
这包含三个主要模块的综合结果，应该是所用的主要输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: right&#34;&gt;contig_id&lt;/th&gt;
          &lt;th style=&#34;text-align: right&#34;&gt;contig_length&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;provirus&lt;/th&gt;
          &lt;th style=&#34;text-align: right&#34;&gt;proviral_length&lt;/th&gt;
          &lt;th style=&#34;text-align: right&#34;&gt;gene_count&lt;/th&gt;
          &lt;th style=&#34;text-align: right&#34;&gt;viral_genes&lt;/th&gt;
          &lt;th style=&#34;text-align: right&#34;&gt;host_genes&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;checkv_quality&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;miuvig_quality&lt;/th&gt;
          &lt;th style=&#34;text-align: right&#34;&gt;completeness&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;completeness_method&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;complete_genome_type&lt;/th&gt;
          &lt;th style=&#34;text-align: right&#34;&gt;contamination&lt;/th&gt;
          &lt;th style=&#34;text-align: right&#34;&gt;kmer_freq&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;warnings&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;1&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;5325&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;No&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;NA&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;11&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;0&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Not-determined&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Genome-fragment&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;NA&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;NA&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;NA&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;0.0&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;1.00&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;no viral genes detected&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;2&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;41803&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;No&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;NA&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;72&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;27&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Low-quality&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Genome-fragment&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;21.99&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;AAI-based (medium-confidence)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;NA&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;0.0&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;1.00&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;flagged DTR&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;3&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;38254&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Yes&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;36072&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;54&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;23&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Medium-quality&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Genome-fragment&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;80.30&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;HMM-based (lower-bound)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;NA&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;5.7&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;1.00&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;NA&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;4&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;67622&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;No&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;NA&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;143&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;25&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;0&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;High-quality&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;High-quality&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;100.00&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;AAI-based (high-confidence)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;NA&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;0.0&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;1.76&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;high kmer_freq&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;5&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;98051&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;No&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;NA&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;158&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;27&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Complete&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;High-quality&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;100.00&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;AAI-based (high-confidence)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;DTR&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;0.0&lt;/td&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;1.00&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;NA&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在上面的示例中，有 5 个病毒contig的结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一个 5325 bp contig没有完整性预测，这由“checkv_quality”字段的“未确定”指示。该contig也没有鉴定出病毒基因，因此它甚至有可能不是病毒。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二个 41803 bp contig被归类为“低质量”，因为其完整性&amp;lt;50%。这是基于“AAI”方法的估计。请注意，quality_summary.tsv 文件中仅报告高或中置信度估计值。您可以查看“completeness.tsv”了解更多详细信息。该contig具有 DTR，但由于某种原因被标记（有关详细信息，请参阅complete_genomes.tsv）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三个contig被认为是“中等质量”，因为其完整性估计为 80%（基于“HMM”方法）。这意味着它太新颖了，无法基于 AAI 来估计完整性，但与 CheckV 参考基因组共享 HMM。请注意，该值代表一个下限（意味着真实的完整性可能高于但不低于该值）。请注意，该contig也被归类为原病毒。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第四个contig基于 &amp;gt;90% 的完整性被归类为高质量。但请注意，“kmer_freq”的值为 1.7。这表明病毒基因组在contig中多次出现。这些情况相当罕见，但仍需警惕。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据直接末端重复 (DTR) 的存在，第五个contig被分类为完整，并且根据 AAI 方法具有 100% 完整性。该序列可以放心地视为完整的基因组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;contamination.tsv
如何估计污染的详细概述&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;completeness.tsv
关于如何估计完整性的详细概述&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;complete_genomes.tsv
已确定的假定完整基因组的详细概述&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pipeline-1&#34;&gt;Pipeline&lt;/h4&gt;
&lt;img src=&#34;images/checkV.png&#34; title=&#34;&#34;/&gt;
&lt;p&gt;CheckV的具体工作流程如下：&lt;/p&gt;
&lt;p&gt;A: 去除宿主污染&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基因首先基于与自定义HMM数据库的比较被注释为病毒或微生物。&lt;/li&gt;
&lt;li&gt;CheckV扫描contig（从5&amp;rsquo;到3&amp;rsquo;），比较基因注释和相邻基因窗口之间的GC含量。&lt;/li&gt;
&lt;li&gt;这些信息用于计算每个基因间位置的分数并识别宿主-病毒断点。&lt;/li&gt;
&lt;li&gt;这种方法最适合主要为病毒的contig。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;B: 估计基因组完整性&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;蛋白质首先使用AAI（平均氨基酸身份）与CheckV基因组数据库进行比较。&lt;/li&gt;
&lt;li&gt;在识别到最佳匹配后，完整性作为contig长度（或provirus的病毒区域长度）与匹配参考长度的比率计算。&lt;/li&gt;
&lt;li&gt;根据比对的强度报告置信水平。&lt;/li&gt;
&lt;li&gt;通常，高和中等置信水平的估计非常准确。&lt;/li&gt;
&lt;li&gt;如果病毒基因组没有与CheckV数据库的密切匹配，CheckV基于contig上识别的病毒HMM估计完整性。&lt;/li&gt;
&lt;li&gt;基于找到的HMM，CheckV返回基因组完整性的估计范围（例如，35%到60%完整性），表示基于具有相同病毒HMM的参考基因组长度分布的90%置信区间。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;C: 预测封闭基因组&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接末端重复（DTRs）：在contig的起始和结束处有&amp;gt;20bp的重复序列，这是最可信的标志，可能表示环状基因组或从环状模板复制的线性基因组。&lt;/li&gt;
&lt;li&gt;Provirus：在5&amp;rsquo;和3&amp;rsquo;末端有预测的宿主边界的病毒区域（参见部分A）。
&lt;ul&gt;
&lt;li&gt;注意：如果宿主区域已被移除（如使用VIBRANT或VirSorter），CheckV将不会检测到provirus。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;倒位末端重复（ITRs）：在contig的起始和结束处有&amp;gt;20bp的重复序列（3&amp;rsquo;重复倒置），这是最不可信的标志。&lt;/li&gt;
&lt;li&gt;对于上述所有方法，CheckV还会检查contig是否大致符合基于估计完整性的正确序列长度；这很重要，因为末端重复可能代表宏基因组组装的伪影。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;D: 总结质量&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于A-C的结果，CheckV生成报告文件，并将查询contig分配到五个质量层次之一（与MIUViG质量层次一致并扩展）：
&lt;ul&gt;
&lt;li&gt;完整（参见部分C）&lt;/li&gt;
&lt;li&gt;高质量（&amp;gt;90%完整性）&lt;/li&gt;
&lt;li&gt;中等质量（50-90%完整性）&lt;/li&gt;
&lt;li&gt;低质量（&amp;lt;50%完整性）&lt;/li&gt;
&lt;li&gt;未确定质量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以分步使用checkV：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;checkv contamination input_file.fna output_directory -t &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;checkv completeness input_file.fna output_directory -t &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;checkv complete_genomes input_file.fna output_directory
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;checkv quality_summary input_file.fna output_directory
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;application&#34;&gt;Application&lt;/h2&gt;
&lt;p&gt;这些专门的病毒鉴定工具各有优劣，研究者可以根据具体的研究需求和数据特征选择合适的工具。通过结合多种方法，可以提高病毒序列鉴定的准确性和效率，为深入理解病毒在生态系统中的角色和功能提供有力支持。&lt;/p&gt;
&lt;h3 id=&#34;biogeographic-patterns-and-drivers-of-soil-viromes&#34;&gt;Biogeographic patterns and drivers of soil viromes&lt;/h3&gt;
&lt;img src=&#34;images/soil_virome.png&#34; title=&#34;&#34;/&gt;
&lt;p&gt;这是马斌老师团队2024发表于Nature Ecology &amp;amp; Evolution的一篇文章[8]。&lt;/p&gt;
&lt;p&gt;病毒对于塑造土壤微生物功能和生态系统至关重要。然而，对土壤病毒组的研究在空间尺度和生物群落覆盖方面都受到限制。&lt;/p&gt;
&lt;p&gt;在这里，使用全球土壤病毒组数据集 (GSV) 全面综合了土壤病毒组生物地理模式，分析了全球 1,824 个土壤宏基因组，发现了 80,750 个 DNA 病毒的部分基因组，其中 96.7% 未分类。
不同生物群落的土壤病毒多样性和群落结构的生物地理学各不相同。有趣的是，病毒的多样性与微生物的多样性并不相符，相反，森林和灌木丛土壤中的病毒多样性较低。&lt;/p&gt;
&lt;p&gt;预测的土壤病毒多样性图谱进一步证实了土壤质地和水分条件是影响多样性的关键因素，揭示了潮湿和半湿润地区更高的多样性。此外，二项式度分布模式表明土壤病毒的随机共现模式。这些发现对于阐明土壤病毒生态学以及将病毒全面纳入土壤生态系统模型至关重要。&lt;/p&gt;
&lt;p&gt;他们在这篇文章里用的鉴定病毒的方法是：&lt;/p&gt;
&lt;p&gt;组装的contigs通过 VirSorter (v.1.0.5)比对 NCBI 病毒参考序列数据库 (Refseq) (&lt;a class=&#34;link&#34; href=&#34;https://www.ncbi.nlm.nih.gov/genome/viruses/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.ncbi.nlm.nih.gov/genome/viruses/&lt;/a&gt;) ；使用VIBRANT (v.1.2.1) 和 DeepVirFinder (v.1.0)，截止长度为 1,000bp。注释为 VirSorter 类别 1、2、4 和 5 的contigs，或 DeepVirFinder 评分≥0.7 且 P &amp;lt; 0.05 的contigs，被视为假定的病毒contigs。通过将数据与 VIBRANT 的数据相结合，CAT (v.5.0.3) 用于进一步估计按 VirSorter 类别 3 和 6 排序的contigs，或 DeepVirFinder 得分为 0.7-0.9 且 P&amp;lt; 0.05 的contigs。具有 &amp;gt;40% 开放阅读框注释为细菌、古细菌或真核生物的contigs被视为非病毒contigs。取出≥5 kb或≥1.5 kb的contigs和环状片段进行进一步研究；通过 BLAST (v.2.11.0) 鉴定的 Φx174 DNA 被手动去除。&lt;/p&gt;
&lt;h3 id=&#34;a-global-atlas-of-soil-viruses&#34;&gt;A global atlas of soil viruses&lt;/h3&gt;
&lt;img src=&#34;images/soil_atlats.png&#34; title=&#34;&#34;/&gt;
&lt;p&gt;这也是一篇2024年发表于Nature microbiology的文章[9]：&lt;/p&gt;
&lt;p&gt;历史上被微生物生态学家忽视的土壤病毒现在被认为对全球生物地球化学循环至关重要。然而，我们对其全球分布、活动以及与土壤微生物组相互作用的了解仍然有限。
在这里展示了全球土壤病毒图谱，这是一个综合数据集，由 2,953 个先前测序的土壤宏基因组编译而成，由 616,935 个未培养的病毒基因组和 38,508 个独特的病毒操作分类单元组成。
全球土壤病毒图谱的稀疏曲线表明，大多数土壤病毒多样性仍未被探索，样本间高空间周转率和低共享病毒操作分类单元率进一步强调了这一点。
通过检查与生物地球化学功能相关的基因，还证明了病毒影响土壤碳和养分循环的潜力。这项研究代表了土壤病毒多样性的广泛特征，并为制定有关病毒圈在土壤微生物组和全球生物地球化学中的作用的可检验假设奠定了基础。&lt;/p&gt;
&lt;p&gt;这篇文章中鉴定病毒的方法是：&lt;/p&gt;
&lt;p&gt;使用 IMG/VR v3 病毒识别管道的修改版本对病毒contigs进行了初步识别。该管道根据 Pfam 数据库 和 VirFinder 中 23,841 个病毒蛋白家族、16,260 个微生物来源蛋白家族的存在来识别病毒，以识别至少 1 kb 长的contigs中的假定病毒基因组。&lt;/p&gt;
&lt;p&gt;在本研究过程中，发布了 geNomad v1.3.3，这是一种具有改进的分类性能的病毒识别工具，并将其纳入流程中，以提高预测置信度并执行分类分配。
使用 CheckVv1.0.1（数据库版本 1.5） 进一步处理预测的病毒序列，以评估病毒基因组的质量。
由于本研究重点关注非整合病毒基因组，因此被 geNomad 或 CheckV 标记为原病毒的contigs被丢弃。
从剩余的contigs中，使用以下规则选择病毒基因组：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;至少 1 kb 的contigs，与 CheckV数据库中的基因组具有高度相似性（即具有高质量或中等完整性估计）或包含自动选择直接末端重复；&lt;/li&gt;
&lt;li&gt;长于 10 kb 的contigs需要具有高于 0.8 的 geNomad 病毒评分，并且编码一种病毒标志（例如，终止酶、衣壳蛋白、门户蛋白等）（由 geNomad 确定），或者具有gNomad 病毒标记至少为 5.0；&lt;/li&gt;
&lt;li&gt;短于10kb和长于5kb的contigs需要具有高于0.9的geNomad病毒评分，编码至少一种病毒标志并且具有高于2.0的病毒标记富集。
这产生了 49,649 个病毒contigs，将其用于下游分析。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;病毒基因组按照 MIUViG 指南聚类成 vOTU（平均核苷酸同一性为 95%，比对分数为 85%）。简而言之，进行了全对全 BLAST（v2.13.0+，&amp;rsquo;-task megablast -evalue 1e-5 -max_target_seqs 20000&amp;rsquo;）搜索来估计成对平均核苷酸身份和比对分数 (AF)。并采用 pyLeiden对基因组进行聚类，使用图作为输入，其中满足 MIUViG 标准的基因组对通过边连接。&lt;/p&gt;
&lt;p&gt;使用 DIAMOND 进行蛋白质比对，使用 Markov Cluster Process 进行聚类，将病毒按大致属水平（40% 平均氨基酸同一性，20% 共享基因）和科水平（20% 平均氨基酸同一性，10% 共享基因）聚类进行分组。通过与先前描述的来自 NCBI GenBank 和 MAG 的 160 万个细菌和古菌基因组的 CRISPR 间隔区数据库相匹配，将病毒序列分配给假定的宿主（细菌和古菌）分类群。&lt;/p&gt;
&lt;h3 id=&#34;bacteriophage-in-1300-year-old-human-palaeofaeces&#34;&gt;Bacteriophage in 1300-year-old human palaeofaeces&lt;/h3&gt;
&lt;img src=&#34;images/palaeofaeces.png&#34; title=&#34;&#34;/&gt;
&lt;p&gt;这是2024年在NC上发表的研究[10]：&lt;/p&gt;
&lt;p&gt;噬菌体被广泛认为是快速进化的生物实体。然而，关于古代噬菌体的知识是有限的。在这里，我们分析了先前从古代古粪便和人类肠道内容物样本中生成的 DNA 序列数据集，并鉴定了与当今的 Mushuvirus mushu（一种感染肠道共生细菌的病毒）几乎相同的古代噬菌体基因组。
基因组的 DNA 损伤模式与其古代起源一致，尽管经过 1300 年的进化，古代木须病毒基因组与现代对应物具有 97.7% 的核苷酸同一性，表明原噬菌体与其宿主之间存在长期关系。此外，还重建并验证了过去 5300 年的 297 个其他噬菌体基因组，包括属于未知家族的噬菌体基因组。
研究结果证明了重建古代噬菌体基因组序列的可行性，从而扩大了已知的病毒圈，并为跨越数千年的噬菌体-细菌相互作用提供了见解。&lt;/p&gt;
&lt;p&gt;病毒contigs鉴定：&lt;/p&gt;
&lt;p&gt;使用三种机器学习工具来识别病毒contigs。第一个是 Jaeger v.1.1.0，这是一种深度学习模型，可基于自动组成特征提取来识别宏基因组中的噬菌体基因组序列 (&lt;a class=&#34;link&#34; href=&#34;https://github.com/Yasas1994/Jaeger&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/Yasas1994/Jaeger&lt;/a&gt;)。第二个和第三个是 VIBRANT v.1.2.124 和 VirSorter2 v.2.2.325，它们依赖于分析代表与预测蛋白质相似但应用不同分类器和参考数据库的保守家族和/或结构域的 HMM 图谱。 Jaeger 和 VIBRANT 使用默认设置运行。对于 VirSorter2，我们使用了位置参数“&amp;ndash;include-groups dsDNAphage,NCLDV,ssDNA,lavidaviridae all”。进一步分析了至少两种工具分类为病毒的contigs。&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Camargo, A.P., Roux, S., Schulz, F. et al. Identification of mobile genetic elements with geNomad. Nat Biotechnol (2023). &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1038/s41587-023-01953-y&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doi.org/10.1038/s41587-023-01953-y&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ren, J., Song, K., Deng, C., Ahlgren, N.A., Fuhrman, J.A., Li, Y., Xie, X., Poplin, R. and Sun, F. (2020), Identifying viruses from metagenomic data using deep learning. Quantitative Biology, 8: 64-77. &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1007/s40484-019-0187-4&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doi.org/10.1007/s40484-019-0187-4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Guo, J., Bolduc, B., Zayed, A.A. et al. VirSorter2: a multi-classifier, expert-guided approach to detect diverse DNA and RNA viruses. Microbiome 9, 37 (2021). &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1186/s40168-020-00990-y&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doi.org/10.1186/s40168-020-00990-y&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kieft, K., Zhou, Z. &amp;amp; Anantharaman, K. VIBRANT: automated recovery, annotation and curation of microbial viruses, and evaluation of viral community function from genomic sequences. Microbiome 8, 90 (2020). &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1186/s40168-020-00867-0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doi.org/10.1186/s40168-020-00867-0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chen, L., Banfield, J.F. COBRA improves the completeness and contiguity of viral genomes assembled from metagenomes. Nat Microbiol 9, 737–750 (2024). &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1038/s41564-023-01598-2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doi.org/10.1038/s41564-023-01598-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Flamholz, Z.N., Biller, S.J. &amp;amp; Kelly, L. Large language models improve annotation of prokaryotic viral proteins. Nat Microbiol 9, 537–549 (2024). &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1038/s41564-023-01584-8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doi.org/10.1038/s41564-023-01584-8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nayfach, S., Camargo, A.P., Schulz, F. et al. CheckV assesses the quality and completeness of metagenome-assembled viral genomes. Nat Biotechnol 39, 578–585 (2021). &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1038/s41587-020-00774-7&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doi.org/10.1038/s41587-020-00774-7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ma, B., Wang, Y., Zhao, K. et al. Biogeographic patterns and drivers of soil viromes. Nat Ecol Evol 8, 717–728 (2024). &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1038/s41559-024-02347-2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doi.org/10.1038/s41559-024-02347-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Graham, E.B., Camargo, A.P., Wu, R. et al. A global atlas of soil viruses reveals unexplored biodiversity and potential biogeochemical impacts. Nat Microbiol (2024). &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1038/s41564-024-01686-x&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doi.org/10.1038/s41564-024-01686-x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rozwalak, P., Barylski, J., Wijesekara, Y. et al. Ultraconserved bacteriophage genome sequence identified in 1300-year-old human palaeofaeces. Nat Commun 15, 495 (2024). &lt;a class=&#34;link&#34; href=&#34;https://doi.org/10.1038/s41467-023-44370-0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://doi.org/10.1038/s41467-023-44370-0&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
    </channel>
</rss>
